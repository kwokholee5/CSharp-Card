{
  "$schema": "../metadata/schema.json",
  "metadata": {
    "category": "comprehensive",
    "subcategory": "csharp-interview-questions",
    "fileVersion": 1,
    "lastUpdated": "2025-01-27T12:00:00.000Z",
    "questionCount": 7,
    "avgDifficulty": 4.5
  },
  "questions": [
    {
      "id": "basics-0001",
      "text": "What will be displayed when this C# code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Hello World",
          "explanation": "Console.WriteLine() outputs the string followed by a newline"
        },
        {
          "id": "b",
          "text": "HelloWorld",
          "explanation": "This would be the result of Console.Write() without newline"
        },
        {
          "id": "c",
          "text": "Compilation error",
          "explanation": "The syntax is correct and will compile successfully"
        },
        {
          "id": "d",
          "text": "Runtime error",
          "explanation": "There's nothing in this code that would cause a runtime error"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Console.WriteLine() outputs the provided string to the console and automatically adds a newline character at the end. This is the standard method for displaying text with line breaks in C# console applications.",
      "codeExample": {
        "language": "csharp",
        "code": "Console.WriteLine(\"Hello World\");"
      },
      "category": "basics",
      "subcategory": "console-output",
      "difficulty": 1,
      "tags": ["console", "output", "strings", "basics"]
    },
    {
      "id": "basics-0002",
      "text": "Which of the following is NOT a valid C# data type?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "int",
          "explanation": "int is a valid 32-bit integer type in C#"
        },
        {
          "id": "b",
          "text": "string",
          "explanation": "string is a valid reference type for text in C#"
        },
        {
          "id": "c",
          "text": "boolean",
          "explanation": "boolean is NOT a valid C# type - it should be 'bool'"
        },
        {
          "id": "d",
          "text": "double",
          "explanation": "double is a valid 64-bit floating-point type in C#"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "In C#, the boolean type is called 'bool', not 'boolean'. 'boolean' is the Java equivalent. C# uses 'bool' as its boolean data type, which can hold true or false values.",
      "codeExample": {
        "language": "csharp",
        "code": "var isValid = true;\nvar number = 42;\nvar text = \"Hello\";\nvar value = 3.14;"
      },
      "category": "basics",
      "subcategory": "data-types",
      "difficulty": 1,
      "tags": ["data-types", "bool", "basics", "syntax"]
    },
    {
      "id": "basics-0003",
      "text": "What will be the output of this loop?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "0, 1, 2",
          "explanation": "The loop starts at 0 and continues while i < 3, so it prints 0, 1, 2"
        },
        {
          "id": "b",
          "text": "1, 2, 3",
          "explanation": "The loop starts at 0, not 1, so it won't start with 1"
        },
        {
          "id": "c",
          "text": "0, 1, 2, 3",
          "explanation": "The loop condition is i < 3, so it stops before reaching 3"
        },
        {
          "id": "d",
          "text": "Nothing (infinite loop)",
          "explanation": "The loop has a proper termination condition and will complete normally"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "The for loop initializes i to 0, continues while i < 3, and increments i after each iteration. This means it will execute for i = 0, 1, and 2, printing each value. The loop terminates when i reaches 3 because the condition i < 3 becomes false.",
      "codeExample": {
        "language": "csharp",
        "code": "for (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "basics",
      "subcategory": "loops",
      "difficulty": 2,
      "tags": ["loops", "for-loop", "control-flow", "basics"]
    },
    {
      "id": "intermediate-0001",
      "text": "What is the difference between '==' and 'Equals()' in C#?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "There is no difference - they do exactly the same thing",
          "explanation": "There are important differences between these two comparison methods"
        },
        {
          "id": "b",
          "text": "== compares references, Equals() compares values",
          "explanation": "This is partially correct but oversimplified - it depends on the types involved"
        },
        {
          "id": "c",
          "text": "== compares values for value types and references for reference types, Equals() can be overridden for custom comparison logic",
          "explanation": "This is the most accurate description of the differences"
        },
        {
          "id": "d",
          "text": "== is faster, Equals() is slower",
          "explanation": "Performance differences depend on the specific implementation, not the operator itself"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "The '==' operator compares values for value types and references for reference types. 'Equals()' is a virtual method that can be overridden to provide custom comparison logic. For strings, == is overloaded to compare content, but for custom objects, you should override Equals() for meaningful comparisons.",
      "codeExample": {
        "language": "csharp",
        "code": "string s1 = \"hello\";\nstring s2 = \"hello\";\n\n// What would these comparisons return?\nbool refEqual = ReferenceEquals(s1, s2);\nbool valueEqual = s1 == s2;\nbool equalsEqual = s1.Equals(s2);"
      },
      "category": "intermediate",
      "subcategory": "comparison",
      "difficulty": 4,
      "tags": ["operators", "equals", "reference-equality", "value-equality", "strings"]
    },
    {
      "id": "advanced-0001",
      "text": "What is the purpose of the 'async' keyword in C#?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "To make methods run in parallel",
          "explanation": "async doesn't make methods run in parallel - it enables asynchronous programming"
        },
        {
          "id": "b",
          "text": "To enable asynchronous programming with await",
          "explanation": "This is correct - async enables the use of await for non-blocking operations"
        },
        {
          "id": "c",
          "text": "To create background threads",
          "explanation": "async/await doesn't create threads - it uses the thread pool efficiently"
        },
        {
          "id": "d",
          "text": "To improve performance of synchronous code",
          "explanation": "async/await is for I/O-bound operations, not performance optimization of CPU-bound code"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "The 'async' keyword enables asynchronous programming by allowing the use of 'await' within the method. This is particularly useful for I/O-bound operations like file access, network calls, or database queries, where the method can yield control while waiting for the operation to complete.",
      "codeExample": {
        "language": "csharp",
        "code": "public async Task<string> ReadFileAsync(string path)\n{\n    using var reader = new StreamReader(path);\n    var content = await reader.ReadToEndAsync();\n    return content;\n}\n\n// Usage:\nvar result = await ReadFileAsync(\"file.txt\");"
      },
      "category": "advanced",
      "subcategory": "async-await",
      "difficulty": 5,
      "tags": ["async", "await", "asynchronous", "Task", "I/O"]
    },
    {
      "id": "intermediate-0002",
      "text": "What will happen when this code is compiled?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Compilation error - ambiguous method call",
          "explanation": "The compiler cannot determine which overload to call when null is passed"
        },
        {
          "id": "b",
          "text": "Compilation error - null cannot be passed to string parameter",
          "explanation": "null can be passed to string parameters in C#"
        },
        {
          "id": "c",
          "text": "Compiles successfully, calls Process(string) at runtime",
          "explanation": "null can be implicitly converted to string, so the string overload is chosen"
        },
        {
          "id": "d",
          "text": "Compiles successfully, calls Process(object) at runtime",
          "explanation": "The string overload is more specific than the object overload"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "When null is passed to an overloaded method, the compiler chooses the most specific type that can accept null. Since string can be null and is more specific than object, the Process(string) overload is selected.",
      "codeExample": {
        "language": "csharp",
        "code": "public void Process(string value) { }\npublic void Process(object value) { }\n\n// Method call:\nProcess(null);"
      },
      "category": "intermediate",
      "subcategory": "method-overloading",
      "difficulty": 3,
      "tags": ["overloading", "null", "compilation", "type-resolution"]
    }
  ]
}
