{
  "$schema": "../metadata/schema.json",
  "metadata": {
    "category": "comprehensive",
    "subcategory": "csharp-interview-questions",
    "fileVersion": 1,
    "lastUpdated": "2025-08-31T18:53:35.519302Z",
    "questionCount": 200,
    "avgDifficulty": 4.5
  },
  "questions": [
    {
      "id": "logic-0001",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 1",
          "explanation": "Explanation for option A in loop question 1"
        },
        {
          "id": "b",
          "text": "Option B for loop 1",
          "explanation": "Explanation for option B in loop question 1"
        },
        {
          "id": "c",
          "text": "Option C for loop 1",
          "explanation": "Explanation for option C in loop question 1"
        },
        {
          "id": "d",
          "text": "Option D for loop 1",
          "explanation": "Explanation for option D in loop question 1"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 1",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 1\nfor (int i = 0; i < 1; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0002",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 2",
          "explanation": "Explanation for option A in loop question 2"
        },
        {
          "id": "b",
          "text": "Option B for loop 2",
          "explanation": "Explanation for option B in loop question 2"
        },
        {
          "id": "c",
          "text": "Option C for loop 2",
          "explanation": "Explanation for option C in loop question 2"
        },
        {
          "id": "d",
          "text": "Option D for loop 2",
          "explanation": "Explanation for option D in loop question 2"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 2",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 2\nfor (int i = 0; i < 2; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0003",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 3",
          "explanation": "Explanation for option A in loop question 3"
        },
        {
          "id": "b",
          "text": "Option B for loop 3",
          "explanation": "Explanation for option B in loop question 3"
        },
        {
          "id": "c",
          "text": "Option C for loop 3",
          "explanation": "Explanation for option C in loop question 3"
        },
        {
          "id": "d",
          "text": "Option D for loop 3",
          "explanation": "Explanation for option D in loop question 3"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 3",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 3\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0004",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 4",
          "explanation": "Explanation for option A in loop question 4"
        },
        {
          "id": "b",
          "text": "Option B for loop 4",
          "explanation": "Explanation for option B in loop question 4"
        },
        {
          "id": "c",
          "text": "Option C for loop 4",
          "explanation": "Explanation for option C in loop question 4"
        },
        {
          "id": "d",
          "text": "Option D for loop 4",
          "explanation": "Explanation for option D in loop question 4"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 4",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 4\nfor (int i = 0; i < 4; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0005",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 5",
          "explanation": "Explanation for option A in loop question 5"
        },
        {
          "id": "b",
          "text": "Option B for loop 5",
          "explanation": "Explanation for option B in loop question 5"
        },
        {
          "id": "c",
          "text": "Option C for loop 5",
          "explanation": "Explanation for option C in loop question 5"
        },
        {
          "id": "d",
          "text": "Option D for loop 5",
          "explanation": "Explanation for option D in loop question 5"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 5",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 5\nfor (int i = 0; i < 5; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0006",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 6",
          "explanation": "Explanation for option A in loop question 6"
        },
        {
          "id": "b",
          "text": "Option B for loop 6",
          "explanation": "Explanation for option B in loop question 6"
        },
        {
          "id": "c",
          "text": "Option C for loop 6",
          "explanation": "Explanation for option C in loop question 6"
        },
        {
          "id": "d",
          "text": "Option D for loop 6",
          "explanation": "Explanation for option D in loop question 6"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for loop logic question 6",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 6\nfor (int i = 0; i < 6; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0007",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 7",
          "explanation": "Explanation for option A in loop question 7"
        },
        {
          "id": "b",
          "text": "Option B for loop 7",
          "explanation": "Explanation for option B in loop question 7"
        },
        {
          "id": "c",
          "text": "Option C for loop 7",
          "explanation": "Explanation for option C in loop question 7"
        },
        {
          "id": "d",
          "text": "Option D for loop 7",
          "explanation": "Explanation for option D in loop question 7"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 7",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 7\nfor (int i = 0; i < 7; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0008",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 8",
          "explanation": "Explanation for option A in loop question 8"
        },
        {
          "id": "b",
          "text": "Option B for loop 8",
          "explanation": "Explanation for option B in loop question 8"
        },
        {
          "id": "c",
          "text": "Option C for loop 8",
          "explanation": "Explanation for option C in loop question 8"
        },
        {
          "id": "d",
          "text": "Option D for loop 8",
          "explanation": "Explanation for option D in loop question 8"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 8",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 8\nfor (int i = 0; i < 8; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0009",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 9",
          "explanation": "Explanation for option A in loop question 9"
        },
        {
          "id": "b",
          "text": "Option B for loop 9",
          "explanation": "Explanation for option B in loop question 9"
        },
        {
          "id": "c",
          "text": "Option C for loop 9",
          "explanation": "Explanation for option C in loop question 9"
        },
        {
          "id": "d",
          "text": "Option D for loop 9",
          "explanation": "Explanation for option D in loop question 9"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 9",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 9\nfor (int i = 0; i < 9; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0010",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 10",
          "explanation": "Explanation for option A in loop question 10"
        },
        {
          "id": "b",
          "text": "Option B for loop 10",
          "explanation": "Explanation for option B in loop question 10"
        },
        {
          "id": "c",
          "text": "Option C for loop 10",
          "explanation": "Explanation for option C in loop question 10"
        },
        {
          "id": "d",
          "text": "Option D for loop 10",
          "explanation": "Explanation for option D in loop question 10"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 10",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 10\nfor (int i = 0; i < 10; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0011",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 11",
          "explanation": "Explanation for option A in loop question 11"
        },
        {
          "id": "b",
          "text": "Option B for loop 11",
          "explanation": "Explanation for option B in loop question 11"
        },
        {
          "id": "c",
          "text": "Option C for loop 11",
          "explanation": "Explanation for option C in loop question 11"
        },
        {
          "id": "d",
          "text": "Option D for loop 11",
          "explanation": "Explanation for option D in loop question 11"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 11",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 11\nfor (int i = 0; i < 11; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0012",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 12",
          "explanation": "Explanation for option A in loop question 12"
        },
        {
          "id": "b",
          "text": "Option B for loop 12",
          "explanation": "Explanation for option B in loop question 12"
        },
        {
          "id": "c",
          "text": "Option C for loop 12",
          "explanation": "Explanation for option C in loop question 12"
        },
        {
          "id": "d",
          "text": "Option D for loop 12",
          "explanation": "Explanation for option D in loop question 12"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 12",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 12\nfor (int i = 0; i < 12; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0013",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 13",
          "explanation": "Explanation for option A in loop question 13"
        },
        {
          "id": "b",
          "text": "Option B for loop 13",
          "explanation": "Explanation for option B in loop question 13"
        },
        {
          "id": "c",
          "text": "Option C for loop 13",
          "explanation": "Explanation for option C in loop question 13"
        },
        {
          "id": "d",
          "text": "Option D for loop 13",
          "explanation": "Explanation for option D in loop question 13"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 13",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 13\nfor (int i = 0; i < 13; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0014",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 14",
          "explanation": "Explanation for option A in loop question 14"
        },
        {
          "id": "b",
          "text": "Option B for loop 14",
          "explanation": "Explanation for option B in loop question 14"
        },
        {
          "id": "c",
          "text": "Option C for loop 14",
          "explanation": "Explanation for option C in loop question 14"
        },
        {
          "id": "d",
          "text": "Option D for loop 14",
          "explanation": "Explanation for option D in loop question 14"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 14",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 14\nfor (int i = 0; i < 14; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0015",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 15",
          "explanation": "Explanation for option A in loop question 15"
        },
        {
          "id": "b",
          "text": "Option B for loop 15",
          "explanation": "Explanation for option B in loop question 15"
        },
        {
          "id": "c",
          "text": "Option C for loop 15",
          "explanation": "Explanation for option C in loop question 15"
        },
        {
          "id": "d",
          "text": "Option D for loop 15",
          "explanation": "Explanation for option D in loop question 15"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 15",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 15\nfor (int i = 0; i < 15; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0016",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 16",
          "explanation": "Explanation for option A in loop question 16"
        },
        {
          "id": "b",
          "text": "Option B for loop 16",
          "explanation": "Explanation for option B in loop question 16"
        },
        {
          "id": "c",
          "text": "Option C for loop 16",
          "explanation": "Explanation for option C in loop question 16"
        },
        {
          "id": "d",
          "text": "Option D for loop 16",
          "explanation": "Explanation for option D in loop question 16"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 16",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 16\nfor (int i = 0; i < 16; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0017",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 17",
          "explanation": "Explanation for option A in loop question 17"
        },
        {
          "id": "b",
          "text": "Option B for loop 17",
          "explanation": "Explanation for option B in loop question 17"
        },
        {
          "id": "c",
          "text": "Option C for loop 17",
          "explanation": "Explanation for option C in loop question 17"
        },
        {
          "id": "d",
          "text": "Option D for loop 17",
          "explanation": "Explanation for option D in loop question 17"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for loop logic question 17",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 17\nfor (int i = 0; i < 17; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0018",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 18",
          "explanation": "Explanation for option A in loop question 18"
        },
        {
          "id": "b",
          "text": "Option B for loop 18",
          "explanation": "Explanation for option B in loop question 18"
        },
        {
          "id": "c",
          "text": "Option C for loop 18",
          "explanation": "Explanation for option C in loop question 18"
        },
        {
          "id": "d",
          "text": "Option D for loop 18",
          "explanation": "Explanation for option D in loop question 18"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 18",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 18\nfor (int i = 0; i < 18; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0019",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 19",
          "explanation": "Explanation for option A in loop question 19"
        },
        {
          "id": "b",
          "text": "Option B for loop 19",
          "explanation": "Explanation for option B in loop question 19"
        },
        {
          "id": "c",
          "text": "Option C for loop 19",
          "explanation": "Explanation for option C in loop question 19"
        },
        {
          "id": "d",
          "text": "Option D for loop 19",
          "explanation": "Explanation for option D in loop question 19"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for loop logic question 19",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 19\nfor (int i = 0; i < 19; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0020",
      "question": "What will be the output of this loop code?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Option A for loop 20",
          "explanation": "Explanation for option A in loop question 20"
        },
        {
          "id": "b",
          "text": "Option B for loop 20",
          "explanation": "Explanation for option B in loop question 20"
        },
        {
          "id": "c",
          "text": "Option C for loop 20",
          "explanation": "Explanation for option C in loop question 20"
        },
        {
          "id": "d",
          "text": "Option D for loop 20",
          "explanation": "Explanation for option D in loop question 20"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for loop logic question 20",
      "codeExample": {
        "language": "csharp",
        "code": "// Loop logic example 20\nfor (int i = 0; i < 20; i++)\n{\n    Console.WriteLine(i);\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "loops",
        "logic",
        "control-flow",
        "for-loop"
      ]
    },
    {
      "id": "logic-0021",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 21",
          "explanation": "Explanation for true condition 21"
        },
        {
          "id": "b",
          "text": "False for condition 21",
          "explanation": "Explanation for false condition 21"
        },
        {
          "id": "c",
          "text": "Error for condition 21",
          "explanation": "Explanation for error condition 21"
        },
        {
          "id": "d",
          "text": "Undefined for condition 21",
          "explanation": "Explanation for undefined condition 21"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 21",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 21\nint x = 21;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0022",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 22",
          "explanation": "Explanation for true condition 22"
        },
        {
          "id": "b",
          "text": "False for condition 22",
          "explanation": "Explanation for false condition 22"
        },
        {
          "id": "c",
          "text": "Error for condition 22",
          "explanation": "Explanation for error condition 22"
        },
        {
          "id": "d",
          "text": "Undefined for condition 22",
          "explanation": "Explanation for undefined condition 22"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 22",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 22\nint x = 22;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0023",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 23",
          "explanation": "Explanation for true condition 23"
        },
        {
          "id": "b",
          "text": "False for condition 23",
          "explanation": "Explanation for false condition 23"
        },
        {
          "id": "c",
          "text": "Error for condition 23",
          "explanation": "Explanation for error condition 23"
        },
        {
          "id": "d",
          "text": "Undefined for condition 23",
          "explanation": "Explanation for undefined condition 23"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for conditional logic question 23",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 23\nint x = 23;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0024",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 24",
          "explanation": "Explanation for true condition 24"
        },
        {
          "id": "b",
          "text": "False for condition 24",
          "explanation": "Explanation for false condition 24"
        },
        {
          "id": "c",
          "text": "Error for condition 24",
          "explanation": "Explanation for error condition 24"
        },
        {
          "id": "d",
          "text": "Undefined for condition 24",
          "explanation": "Explanation for undefined condition 24"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 24",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 24\nint x = 24;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0025",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 25",
          "explanation": "Explanation for true condition 25"
        },
        {
          "id": "b",
          "text": "False for condition 25",
          "explanation": "Explanation for false condition 25"
        },
        {
          "id": "c",
          "text": "Error for condition 25",
          "explanation": "Explanation for error condition 25"
        },
        {
          "id": "d",
          "text": "Undefined for condition 25",
          "explanation": "Explanation for undefined condition 25"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 25",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 25\nint x = 25;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0026",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 26",
          "explanation": "Explanation for true condition 26"
        },
        {
          "id": "b",
          "text": "False for condition 26",
          "explanation": "Explanation for false condition 26"
        },
        {
          "id": "c",
          "text": "Error for condition 26",
          "explanation": "Explanation for error condition 26"
        },
        {
          "id": "d",
          "text": "Undefined for condition 26",
          "explanation": "Explanation for undefined condition 26"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 26",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 26\nint x = 26;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0027",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 27",
          "explanation": "Explanation for true condition 27"
        },
        {
          "id": "b",
          "text": "False for condition 27",
          "explanation": "Explanation for false condition 27"
        },
        {
          "id": "c",
          "text": "Error for condition 27",
          "explanation": "Explanation for error condition 27"
        },
        {
          "id": "d",
          "text": "Undefined for condition 27",
          "explanation": "Explanation for undefined condition 27"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 27",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 27\nint x = 27;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0028",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 28",
          "explanation": "Explanation for true condition 28"
        },
        {
          "id": "b",
          "text": "False for condition 28",
          "explanation": "Explanation for false condition 28"
        },
        {
          "id": "c",
          "text": "Error for condition 28",
          "explanation": "Explanation for error condition 28"
        },
        {
          "id": "d",
          "text": "Undefined for condition 28",
          "explanation": "Explanation for undefined condition 28"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for conditional logic question 28",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 28\nint x = 28;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0029",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 29",
          "explanation": "Explanation for true condition 29"
        },
        {
          "id": "b",
          "text": "False for condition 29",
          "explanation": "Explanation for false condition 29"
        },
        {
          "id": "c",
          "text": "Error for condition 29",
          "explanation": "Explanation for error condition 29"
        },
        {
          "id": "d",
          "text": "Undefined for condition 29",
          "explanation": "Explanation for undefined condition 29"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 29",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 29\nint x = 29;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0030",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 30",
          "explanation": "Explanation for true condition 30"
        },
        {
          "id": "b",
          "text": "False for condition 30",
          "explanation": "Explanation for false condition 30"
        },
        {
          "id": "c",
          "text": "Error for condition 30",
          "explanation": "Explanation for error condition 30"
        },
        {
          "id": "d",
          "text": "Undefined for condition 30",
          "explanation": "Explanation for undefined condition 30"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 30",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 30\nint x = 30;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0031",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 31",
          "explanation": "Explanation for true condition 31"
        },
        {
          "id": "b",
          "text": "False for condition 31",
          "explanation": "Explanation for false condition 31"
        },
        {
          "id": "c",
          "text": "Error for condition 31",
          "explanation": "Explanation for error condition 31"
        },
        {
          "id": "d",
          "text": "Undefined for condition 31",
          "explanation": "Explanation for undefined condition 31"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 31",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 31\nint x = 31;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0032",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 32",
          "explanation": "Explanation for true condition 32"
        },
        {
          "id": "b",
          "text": "False for condition 32",
          "explanation": "Explanation for false condition 32"
        },
        {
          "id": "c",
          "text": "Error for condition 32",
          "explanation": "Explanation for error condition 32"
        },
        {
          "id": "d",
          "text": "Undefined for condition 32",
          "explanation": "Explanation for undefined condition 32"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 32",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 32\nint x = 32;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0033",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 33",
          "explanation": "Explanation for true condition 33"
        },
        {
          "id": "b",
          "text": "False for condition 33",
          "explanation": "Explanation for false condition 33"
        },
        {
          "id": "c",
          "text": "Error for condition 33",
          "explanation": "Explanation for error condition 33"
        },
        {
          "id": "d",
          "text": "Undefined for condition 33",
          "explanation": "Explanation for undefined condition 33"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 33",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 33\nint x = 33;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0034",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 34",
          "explanation": "Explanation for true condition 34"
        },
        {
          "id": "b",
          "text": "False for condition 34",
          "explanation": "Explanation for false condition 34"
        },
        {
          "id": "c",
          "text": "Error for condition 34",
          "explanation": "Explanation for error condition 34"
        },
        {
          "id": "d",
          "text": "Undefined for condition 34",
          "explanation": "Explanation for undefined condition 34"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 34",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 34\nint x = 34;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0035",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 35",
          "explanation": "Explanation for true condition 35"
        },
        {
          "id": "b",
          "text": "False for condition 35",
          "explanation": "Explanation for false condition 35"
        },
        {
          "id": "c",
          "text": "Error for condition 35",
          "explanation": "Explanation for error condition 35"
        },
        {
          "id": "d",
          "text": "Undefined for condition 35",
          "explanation": "Explanation for undefined condition 35"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 35",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 35\nint x = 35;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0036",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 36",
          "explanation": "Explanation for true condition 36"
        },
        {
          "id": "b",
          "text": "False for condition 36",
          "explanation": "Explanation for false condition 36"
        },
        {
          "id": "c",
          "text": "Error for condition 36",
          "explanation": "Explanation for error condition 36"
        },
        {
          "id": "d",
          "text": "Undefined for condition 36",
          "explanation": "Explanation for undefined condition 36"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for conditional logic question 36",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 36\nint x = 36;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0037",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 37",
          "explanation": "Explanation for true condition 37"
        },
        {
          "id": "b",
          "text": "False for condition 37",
          "explanation": "Explanation for false condition 37"
        },
        {
          "id": "c",
          "text": "Error for condition 37",
          "explanation": "Explanation for error condition 37"
        },
        {
          "id": "d",
          "text": "Undefined for condition 37",
          "explanation": "Explanation for undefined condition 37"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for conditional logic question 37",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 37\nint x = 37;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0038",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 38",
          "explanation": "Explanation for true condition 38"
        },
        {
          "id": "b",
          "text": "False for condition 38",
          "explanation": "Explanation for false condition 38"
        },
        {
          "id": "c",
          "text": "Error for condition 38",
          "explanation": "Explanation for error condition 38"
        },
        {
          "id": "d",
          "text": "Undefined for condition 38",
          "explanation": "Explanation for undefined condition 38"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for conditional logic question 38",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 38\nint x = 38;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0039",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 39",
          "explanation": "Explanation for true condition 39"
        },
        {
          "id": "b",
          "text": "False for condition 39",
          "explanation": "Explanation for false condition 39"
        },
        {
          "id": "c",
          "text": "Error for condition 39",
          "explanation": "Explanation for error condition 39"
        },
        {
          "id": "d",
          "text": "Undefined for condition 39",
          "explanation": "Explanation for undefined condition 39"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for conditional logic question 39",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 39\nint x = 39;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0040",
      "question": "What will be the result of this conditional statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True for condition 40",
          "explanation": "Explanation for true condition 40"
        },
        {
          "id": "b",
          "text": "False for condition 40",
          "explanation": "Explanation for false condition 40"
        },
        {
          "id": "c",
          "text": "Error for condition 40",
          "explanation": "Explanation for error condition 40"
        },
        {
          "id": "d",
          "text": "Undefined for condition 40",
          "explanation": "Explanation for undefined condition 40"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for conditional logic question 40",
      "codeExample": {
        "language": "csharp",
        "code": "// Conditional logic example 40\nint x = 40;\nif (x > 10)\n{\n    Console.WriteLine(\"Greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"Less than or equal to 10\");\n}"
      },
      "category": "basics",
      "subcategory": "logic-flow",
      "difficulty": 1,
      "tags": [
        "conditionals",
        "logic",
        "if-else",
        "control-flow"
      ]
    },
    {
      "id": "logic-0041",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 41",
          "explanation": "Explanation for case 1 in switch 41"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 41",
          "explanation": "Explanation for case 2 in switch 41"
        },
        {
          "id": "c",
          "text": "Default for switch 41",
          "explanation": "Explanation for default case in switch 41"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 41",
          "explanation": "Explanation for multiple cases in switch 41"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for switch statement question 41",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 41\nint value = 1;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0042",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 42",
          "explanation": "Explanation for case 1 in switch 42"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 42",
          "explanation": "Explanation for case 2 in switch 42"
        },
        {
          "id": "c",
          "text": "Default for switch 42",
          "explanation": "Explanation for default case in switch 42"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 42",
          "explanation": "Explanation for multiple cases in switch 42"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for switch statement question 42",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 42\nint value = 2;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0043",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 43",
          "explanation": "Explanation for case 1 in switch 43"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 43",
          "explanation": "Explanation for case 2 in switch 43"
        },
        {
          "id": "c",
          "text": "Default for switch 43",
          "explanation": "Explanation for default case in switch 43"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 43",
          "explanation": "Explanation for multiple cases in switch 43"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 43",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 43\nint value = 3;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0044",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 44",
          "explanation": "Explanation for case 1 in switch 44"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 44",
          "explanation": "Explanation for case 2 in switch 44"
        },
        {
          "id": "c",
          "text": "Default for switch 44",
          "explanation": "Explanation for default case in switch 44"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 44",
          "explanation": "Explanation for multiple cases in switch 44"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 44",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 44\nint value = 0;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0045",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 45",
          "explanation": "Explanation for case 1 in switch 45"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 45",
          "explanation": "Explanation for case 2 in switch 45"
        },
        {
          "id": "c",
          "text": "Default for switch 45",
          "explanation": "Explanation for default case in switch 45"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 45",
          "explanation": "Explanation for multiple cases in switch 45"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 45",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 45\nint value = 1;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0046",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 46",
          "explanation": "Explanation for case 1 in switch 46"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 46",
          "explanation": "Explanation for case 2 in switch 46"
        },
        {
          "id": "c",
          "text": "Default for switch 46",
          "explanation": "Explanation for default case in switch 46"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 46",
          "explanation": "Explanation for multiple cases in switch 46"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for switch statement question 46",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 46\nint value = 2;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0047",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 47",
          "explanation": "Explanation for case 1 in switch 47"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 47",
          "explanation": "Explanation for case 2 in switch 47"
        },
        {
          "id": "c",
          "text": "Default for switch 47",
          "explanation": "Explanation for default case in switch 47"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 47",
          "explanation": "Explanation for multiple cases in switch 47"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 47",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 47\nint value = 3;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0048",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 48",
          "explanation": "Explanation for case 1 in switch 48"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 48",
          "explanation": "Explanation for case 2 in switch 48"
        },
        {
          "id": "c",
          "text": "Default for switch 48",
          "explanation": "Explanation for default case in switch 48"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 48",
          "explanation": "Explanation for multiple cases in switch 48"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 48",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 48\nint value = 0;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0049",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 49",
          "explanation": "Explanation for case 1 in switch 49"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 49",
          "explanation": "Explanation for case 2 in switch 49"
        },
        {
          "id": "c",
          "text": "Default for switch 49",
          "explanation": "Explanation for default case in switch 49"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 49",
          "explanation": "Explanation for multiple cases in switch 49"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 49",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 49\nint value = 1;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0050",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 50",
          "explanation": "Explanation for case 1 in switch 50"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 50",
          "explanation": "Explanation for case 2 in switch 50"
        },
        {
          "id": "c",
          "text": "Default for switch 50",
          "explanation": "Explanation for default case in switch 50"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 50",
          "explanation": "Explanation for multiple cases in switch 50"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 50",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 50\nint value = 2;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0051",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 51",
          "explanation": "Explanation for case 1 in switch 51"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 51",
          "explanation": "Explanation for case 2 in switch 51"
        },
        {
          "id": "c",
          "text": "Default for switch 51",
          "explanation": "Explanation for default case in switch 51"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 51",
          "explanation": "Explanation for multiple cases in switch 51"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 51",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 51\nint value = 3;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0052",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 52",
          "explanation": "Explanation for case 1 in switch 52"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 52",
          "explanation": "Explanation for case 2 in switch 52"
        },
        {
          "id": "c",
          "text": "Default for switch 52",
          "explanation": "Explanation for default case in switch 52"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 52",
          "explanation": "Explanation for multiple cases in switch 52"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 52",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 52\nint value = 0;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0053",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 53",
          "explanation": "Explanation for case 1 in switch 53"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 53",
          "explanation": "Explanation for case 2 in switch 53"
        },
        {
          "id": "c",
          "text": "Default for switch 53",
          "explanation": "Explanation for default case in switch 53"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 53",
          "explanation": "Explanation for multiple cases in switch 53"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for switch statement question 53",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 53\nint value = 1;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0054",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 54",
          "explanation": "Explanation for case 1 in switch 54"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 54",
          "explanation": "Explanation for case 2 in switch 54"
        },
        {
          "id": "c",
          "text": "Default for switch 54",
          "explanation": "Explanation for default case in switch 54"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 54",
          "explanation": "Explanation for multiple cases in switch 54"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 54",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 54\nint value = 2;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0055",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 55",
          "explanation": "Explanation for case 1 in switch 55"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 55",
          "explanation": "Explanation for case 2 in switch 55"
        },
        {
          "id": "c",
          "text": "Default for switch 55",
          "explanation": "Explanation for default case in switch 55"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 55",
          "explanation": "Explanation for multiple cases in switch 55"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 55",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 55\nint value = 3;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0056",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 56",
          "explanation": "Explanation for case 1 in switch 56"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 56",
          "explanation": "Explanation for case 2 in switch 56"
        },
        {
          "id": "c",
          "text": "Default for switch 56",
          "explanation": "Explanation for default case in switch 56"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 56",
          "explanation": "Explanation for multiple cases in switch 56"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for switch statement question 56",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 56\nint value = 0;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0057",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 57",
          "explanation": "Explanation for case 1 in switch 57"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 57",
          "explanation": "Explanation for case 2 in switch 57"
        },
        {
          "id": "c",
          "text": "Default for switch 57",
          "explanation": "Explanation for default case in switch 57"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 57",
          "explanation": "Explanation for multiple cases in switch 57"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for switch statement question 57",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 57\nint value = 1;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0058",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 58",
          "explanation": "Explanation for case 1 in switch 58"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 58",
          "explanation": "Explanation for case 2 in switch 58"
        },
        {
          "id": "c",
          "text": "Default for switch 58",
          "explanation": "Explanation for default case in switch 58"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 58",
          "explanation": "Explanation for multiple cases in switch 58"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for switch statement question 58",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 58\nint value = 2;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0059",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 59",
          "explanation": "Explanation for case 1 in switch 59"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 59",
          "explanation": "Explanation for case 2 in switch 59"
        },
        {
          "id": "c",
          "text": "Default for switch 59",
          "explanation": "Explanation for default case in switch 59"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 59",
          "explanation": "Explanation for multiple cases in switch 59"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for switch statement question 59",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 59\nint value = 3;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0060",
      "question": "What will be the output of this switch statement?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Case 1 for switch 60",
          "explanation": "Explanation for case 1 in switch 60"
        },
        {
          "id": "b",
          "text": "Case 2 for switch 60",
          "explanation": "Explanation for case 2 in switch 60"
        },
        {
          "id": "c",
          "text": "Default for switch 60",
          "explanation": "Explanation for default case in switch 60"
        },
        {
          "id": "d",
          "text": "Multiple cases for switch 60",
          "explanation": "Explanation for multiple cases in switch 60"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for switch statement question 60",
      "codeExample": {
        "language": "csharp",
        "code": "// Switch statement example 60\nint value = 0;\nswitch (value)\n{\n    case 0:\n        Console.WriteLine(\"Zero\");\n        break;\n    case 1:\n        Console.WriteLine(\"One\");\n        break;\n    case 2:\n        Console.WriteLine(\"Two\");\n        break;\n    default:\n        Console.WriteLine(\"Other\");\n        break;\n}"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "switch",
        "logic",
        "control-flow",
        "case-statements"
      ]
    },
    {
      "id": "logic-0061",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 61",
          "explanation": "Explanation for caught exception 61"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 61",
          "explanation": "Explanation for no exception 61"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 61",
          "explanation": "Explanation for unhandled exception 61"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 61",
          "explanation": "Explanation for finally block 61"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 61",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 61\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0062",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 62",
          "explanation": "Explanation for caught exception 62"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 62",
          "explanation": "Explanation for no exception 62"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 62",
          "explanation": "Explanation for unhandled exception 62"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 62",
          "explanation": "Explanation for finally block 62"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for exception handling question 62",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 62\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0063",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 63",
          "explanation": "Explanation for caught exception 63"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 63",
          "explanation": "Explanation for no exception 63"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 63",
          "explanation": "Explanation for unhandled exception 63"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 63",
          "explanation": "Explanation for finally block 63"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 63",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 63\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0064",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 64",
          "explanation": "Explanation for caught exception 64"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 64",
          "explanation": "Explanation for no exception 64"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 64",
          "explanation": "Explanation for unhandled exception 64"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 64",
          "explanation": "Explanation for finally block 64"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 64",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 64\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0065",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 65",
          "explanation": "Explanation for caught exception 65"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 65",
          "explanation": "Explanation for no exception 65"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 65",
          "explanation": "Explanation for unhandled exception 65"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 65",
          "explanation": "Explanation for finally block 65"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 65",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 65\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0066",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 66",
          "explanation": "Explanation for caught exception 66"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 66",
          "explanation": "Explanation for no exception 66"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 66",
          "explanation": "Explanation for unhandled exception 66"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 66",
          "explanation": "Explanation for finally block 66"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 66",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 66\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0067",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 67",
          "explanation": "Explanation for caught exception 67"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 67",
          "explanation": "Explanation for no exception 67"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 67",
          "explanation": "Explanation for unhandled exception 67"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 67",
          "explanation": "Explanation for finally block 67"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for exception handling question 67",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 67\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0068",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 68",
          "explanation": "Explanation for caught exception 68"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 68",
          "explanation": "Explanation for no exception 68"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 68",
          "explanation": "Explanation for unhandled exception 68"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 68",
          "explanation": "Explanation for finally block 68"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 68",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 68\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0069",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 69",
          "explanation": "Explanation for caught exception 69"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 69",
          "explanation": "Explanation for no exception 69"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 69",
          "explanation": "Explanation for unhandled exception 69"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 69",
          "explanation": "Explanation for finally block 69"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for exception handling question 69",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 69\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0070",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 70",
          "explanation": "Explanation for caught exception 70"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 70",
          "explanation": "Explanation for no exception 70"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 70",
          "explanation": "Explanation for unhandled exception 70"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 70",
          "explanation": "Explanation for finally block 70"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for exception handling question 70",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 70\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0071",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 71",
          "explanation": "Explanation for caught exception 71"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 71",
          "explanation": "Explanation for no exception 71"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 71",
          "explanation": "Explanation for unhandled exception 71"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 71",
          "explanation": "Explanation for finally block 71"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for exception handling question 71",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 71\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0072",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 72",
          "explanation": "Explanation for caught exception 72"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 72",
          "explanation": "Explanation for no exception 72"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 72",
          "explanation": "Explanation for unhandled exception 72"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 72",
          "explanation": "Explanation for finally block 72"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 72",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 72\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0073",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 73",
          "explanation": "Explanation for caught exception 73"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 73",
          "explanation": "Explanation for no exception 73"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 73",
          "explanation": "Explanation for unhandled exception 73"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 73",
          "explanation": "Explanation for finally block 73"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 73",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 73\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0074",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 74",
          "explanation": "Explanation for caught exception 74"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 74",
          "explanation": "Explanation for no exception 74"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 74",
          "explanation": "Explanation for unhandled exception 74"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 74",
          "explanation": "Explanation for finally block 74"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for exception handling question 74",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 74\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0075",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 75",
          "explanation": "Explanation for caught exception 75"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 75",
          "explanation": "Explanation for no exception 75"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 75",
          "explanation": "Explanation for unhandled exception 75"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 75",
          "explanation": "Explanation for finally block 75"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 75",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 75\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0076",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 76",
          "explanation": "Explanation for caught exception 76"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 76",
          "explanation": "Explanation for no exception 76"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 76",
          "explanation": "Explanation for unhandled exception 76"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 76",
          "explanation": "Explanation for finally block 76"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for exception handling question 76",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 76\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0077",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 77",
          "explanation": "Explanation for caught exception 77"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 77",
          "explanation": "Explanation for no exception 77"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 77",
          "explanation": "Explanation for unhandled exception 77"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 77",
          "explanation": "Explanation for finally block 77"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 77",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 77\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0078",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 78",
          "explanation": "Explanation for caught exception 78"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 78",
          "explanation": "Explanation for no exception 78"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 78",
          "explanation": "Explanation for unhandled exception 78"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 78",
          "explanation": "Explanation for finally block 78"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for exception handling question 78",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 78\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0079",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 79",
          "explanation": "Explanation for caught exception 79"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 79",
          "explanation": "Explanation for no exception 79"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 79",
          "explanation": "Explanation for unhandled exception 79"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 79",
          "explanation": "Explanation for finally block 79"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for exception handling question 79",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 79\ntry\n{\n    int result = 10 / 1;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 6,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0080",
      "question": "What will happen when this exception handling code executes?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Exception caught for try-catch 80",
          "explanation": "Explanation for caught exception 80"
        },
        {
          "id": "b",
          "text": "No exception for try-catch 80",
          "explanation": "Explanation for no exception 80"
        },
        {
          "id": "c",
          "text": "Unhandled exception for try-catch 80",
          "explanation": "Explanation for unhandled exception 80"
        },
        {
          "id": "d",
          "text": "Finally block for try-catch 80",
          "explanation": "Explanation for finally block 80"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for exception handling question 80",
      "codeExample": {
        "language": "csharp",
        "code": "// Exception handling example 80\ntry\n{\n    int result = 10 / 2;\n    Console.WriteLine(result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}"
      },
      "category": "advanced",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "exceptions",
        "try-catch",
        "error-handling",
        "finally"
      ]
    },
    {
      "id": "logic-0081",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 81",
          "explanation": "Explanation for return value A in method 81"
        },
        {
          "id": "b",
          "text": "Return value B for method 81",
          "explanation": "Explanation for return value B in method 81"
        },
        {
          "id": "c",
          "text": "Return value C for method 81",
          "explanation": "Explanation for return value C in method 81"
        },
        {
          "id": "d",
          "text": "Return value D for method 81",
          "explanation": "Explanation for return value D in method 81"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 81",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 81\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(81, 82);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0082",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 82",
          "explanation": "Explanation for return value A in method 82"
        },
        {
          "id": "b",
          "text": "Return value B for method 82",
          "explanation": "Explanation for return value B in method 82"
        },
        {
          "id": "c",
          "text": "Return value C for method 82",
          "explanation": "Explanation for return value C in method 82"
        },
        {
          "id": "d",
          "text": "Return value D for method 82",
          "explanation": "Explanation for return value D in method 82"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 82",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 82\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(82, 83);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0083",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 83",
          "explanation": "Explanation for return value A in method 83"
        },
        {
          "id": "b",
          "text": "Return value B for method 83",
          "explanation": "Explanation for return value B in method 83"
        },
        {
          "id": "c",
          "text": "Return value C for method 83",
          "explanation": "Explanation for return value C in method 83"
        },
        {
          "id": "d",
          "text": "Return value D for method 83",
          "explanation": "Explanation for return value D in method 83"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for method logic question 83",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 83\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(83, 84);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0084",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 84",
          "explanation": "Explanation for return value A in method 84"
        },
        {
          "id": "b",
          "text": "Return value B for method 84",
          "explanation": "Explanation for return value B in method 84"
        },
        {
          "id": "c",
          "text": "Return value C for method 84",
          "explanation": "Explanation for return value C in method 84"
        },
        {
          "id": "d",
          "text": "Return value D for method 84",
          "explanation": "Explanation for return value D in method 84"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 84",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 84\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(84, 85);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0085",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 85",
          "explanation": "Explanation for return value A in method 85"
        },
        {
          "id": "b",
          "text": "Return value B for method 85",
          "explanation": "Explanation for return value B in method 85"
        },
        {
          "id": "c",
          "text": "Return value C for method 85",
          "explanation": "Explanation for return value C in method 85"
        },
        {
          "id": "d",
          "text": "Return value D for method 85",
          "explanation": "Explanation for return value D in method 85"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for method logic question 85",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 85\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(85, 86);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0086",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 86",
          "explanation": "Explanation for return value A in method 86"
        },
        {
          "id": "b",
          "text": "Return value B for method 86",
          "explanation": "Explanation for return value B in method 86"
        },
        {
          "id": "c",
          "text": "Return value C for method 86",
          "explanation": "Explanation for return value C in method 86"
        },
        {
          "id": "d",
          "text": "Return value D for method 86",
          "explanation": "Explanation for return value D in method 86"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 86",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 86\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(86, 87);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0087",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 87",
          "explanation": "Explanation for return value A in method 87"
        },
        {
          "id": "b",
          "text": "Return value B for method 87",
          "explanation": "Explanation for return value B in method 87"
        },
        {
          "id": "c",
          "text": "Return value C for method 87",
          "explanation": "Explanation for return value C in method 87"
        },
        {
          "id": "d",
          "text": "Return value D for method 87",
          "explanation": "Explanation for return value D in method 87"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 87",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 87\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(87, 88);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0088",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 88",
          "explanation": "Explanation for return value A in method 88"
        },
        {
          "id": "b",
          "text": "Return value B for method 88",
          "explanation": "Explanation for return value B in method 88"
        },
        {
          "id": "c",
          "text": "Return value C for method 88",
          "explanation": "Explanation for return value C in method 88"
        },
        {
          "id": "d",
          "text": "Return value D for method 88",
          "explanation": "Explanation for return value D in method 88"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for method logic question 88",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 88\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(88, 89);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0089",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 89",
          "explanation": "Explanation for return value A in method 89"
        },
        {
          "id": "b",
          "text": "Return value B for method 89",
          "explanation": "Explanation for return value B in method 89"
        },
        {
          "id": "c",
          "text": "Return value C for method 89",
          "explanation": "Explanation for return value C in method 89"
        },
        {
          "id": "d",
          "text": "Return value D for method 89",
          "explanation": "Explanation for return value D in method 89"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for method logic question 89",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 89\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(89, 90);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0090",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 90",
          "explanation": "Explanation for return value A in method 90"
        },
        {
          "id": "b",
          "text": "Return value B for method 90",
          "explanation": "Explanation for return value B in method 90"
        },
        {
          "id": "c",
          "text": "Return value C for method 90",
          "explanation": "Explanation for return value C in method 90"
        },
        {
          "id": "d",
          "text": "Return value D for method 90",
          "explanation": "Explanation for return value D in method 90"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 90",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 90\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(90, 91);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0091",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 91",
          "explanation": "Explanation for return value A in method 91"
        },
        {
          "id": "b",
          "text": "Return value B for method 91",
          "explanation": "Explanation for return value B in method 91"
        },
        {
          "id": "c",
          "text": "Return value C for method 91",
          "explanation": "Explanation for return value C in method 91"
        },
        {
          "id": "d",
          "text": "Return value D for method 91",
          "explanation": "Explanation for return value D in method 91"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 91",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 91\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(91, 92);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0092",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 92",
          "explanation": "Explanation for return value A in method 92"
        },
        {
          "id": "b",
          "text": "Return value B for method 92",
          "explanation": "Explanation for return value B in method 92"
        },
        {
          "id": "c",
          "text": "Return value C for method 92",
          "explanation": "Explanation for return value C in method 92"
        },
        {
          "id": "d",
          "text": "Return value D for method 92",
          "explanation": "Explanation for return value D in method 92"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for method logic question 92",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 92\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(92, 93);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0093",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 93",
          "explanation": "Explanation for return value A in method 93"
        },
        {
          "id": "b",
          "text": "Return value B for method 93",
          "explanation": "Explanation for return value B in method 93"
        },
        {
          "id": "c",
          "text": "Return value C for method 93",
          "explanation": "Explanation for return value C in method 93"
        },
        {
          "id": "d",
          "text": "Return value D for method 93",
          "explanation": "Explanation for return value D in method 93"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 93",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 93\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(93, 94);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0094",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 94",
          "explanation": "Explanation for return value A in method 94"
        },
        {
          "id": "b",
          "text": "Return value B for method 94",
          "explanation": "Explanation for return value B in method 94"
        },
        {
          "id": "c",
          "text": "Return value C for method 94",
          "explanation": "Explanation for return value C in method 94"
        },
        {
          "id": "d",
          "text": "Return value D for method 94",
          "explanation": "Explanation for return value D in method 94"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 94",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 94\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(94, 95);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0095",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 95",
          "explanation": "Explanation for return value A in method 95"
        },
        {
          "id": "b",
          "text": "Return value B for method 95",
          "explanation": "Explanation for return value B in method 95"
        },
        {
          "id": "c",
          "text": "Return value C for method 95",
          "explanation": "Explanation for return value C in method 95"
        },
        {
          "id": "d",
          "text": "Return value D for method 95",
          "explanation": "Explanation for return value D in method 95"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for method logic question 95",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 95\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(95, 96);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 3,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0096",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 96",
          "explanation": "Explanation for return value A in method 96"
        },
        {
          "id": "b",
          "text": "Return value B for method 96",
          "explanation": "Explanation for return value B in method 96"
        },
        {
          "id": "c",
          "text": "Return value C for method 96",
          "explanation": "Explanation for return value C in method 96"
        },
        {
          "id": "d",
          "text": "Return value D for method 96",
          "explanation": "Explanation for return value D in method 96"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 96",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 96\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(96, 97);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0097",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 97",
          "explanation": "Explanation for return value A in method 97"
        },
        {
          "id": "b",
          "text": "Return value B for method 97",
          "explanation": "Explanation for return value B in method 97"
        },
        {
          "id": "c",
          "text": "Return value C for method 97",
          "explanation": "Explanation for return value C in method 97"
        },
        {
          "id": "d",
          "text": "Return value D for method 97",
          "explanation": "Explanation for return value D in method 97"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 97",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 97\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(97, 98);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0098",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 98",
          "explanation": "Explanation for return value A in method 98"
        },
        {
          "id": "b",
          "text": "Return value B for method 98",
          "explanation": "Explanation for return value B in method 98"
        },
        {
          "id": "c",
          "text": "Return value C for method 98",
          "explanation": "Explanation for return value C in method 98"
        },
        {
          "id": "d",
          "text": "Return value D for method 98",
          "explanation": "Explanation for return value D in method 98"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for method logic question 98",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 98\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(98, 99);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 5,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0099",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 99",
          "explanation": "Explanation for return value A in method 99"
        },
        {
          "id": "b",
          "text": "Return value B for method 99",
          "explanation": "Explanation for return value B in method 99"
        },
        {
          "id": "c",
          "text": "Return value C for method 99",
          "explanation": "Explanation for return value C in method 99"
        },
        {
          "id": "d",
          "text": "Return value D for method 99",
          "explanation": "Explanation for return value D in method 99"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for method logic question 99",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 99\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(99, 100);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 2,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "logic-0100",
      "question": "What will be returned by this method?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Return value A for method 100",
          "explanation": "Explanation for return value A in method 100"
        },
        {
          "id": "b",
          "text": "Return value B for method 100",
          "explanation": "Explanation for return value B in method 100"
        },
        {
          "id": "c",
          "text": "Return value C for method 100",
          "explanation": "Explanation for return value C in method 100"
        },
        {
          "id": "d",
          "text": "Return value D for method 100",
          "explanation": "Explanation for return value D in method 100"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for method logic question 100",
      "codeExample": {
        "language": "csharp",
        "code": "// Method logic example 100\npublic int Calculate(int x, int y)\n{\n    if (x > y)\n        return x + y;\n    else if (x < y)\n        return x * y;\n    else\n        return x - y;\n}\n\nint result = Calculate(100, 101);\nConsole.WriteLine(result);"
      },
      "category": "intermediate",
      "subcategory": "logic-flow",
      "difficulty": 4,
      "tags": [
        "methods",
        "logic",
        "return-values",
        "parameters"
      ]
    },
    {
      "id": "oop-0001",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 1",
          "explanation": "Explanation for base class in inheritance 1"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 1",
          "explanation": "Explanation for derived class in inheritance 1"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 1",
          "explanation": "Explanation for both classes in inheritance 1"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 1",
          "explanation": "Explanation for compilation error in inheritance 1"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 1",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 1\npublic class BaseClass1\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 1\");\n}\n\npublic class DerivedClass1 : BaseClass1\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 1\");\n}\n\nBaseClass1 obj = new DerivedClass1();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0002",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 2",
          "explanation": "Explanation for base class in inheritance 2"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 2",
          "explanation": "Explanation for derived class in inheritance 2"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 2",
          "explanation": "Explanation for both classes in inheritance 2"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 2",
          "explanation": "Explanation for compilation error in inheritance 2"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for inheritance question 2",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 2\npublic class BaseClass2\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 2\");\n}\n\npublic class DerivedClass2 : BaseClass2\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 2\");\n}\n\nBaseClass2 obj = new DerivedClass2();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0003",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 3",
          "explanation": "Explanation for base class in inheritance 3"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 3",
          "explanation": "Explanation for derived class in inheritance 3"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 3",
          "explanation": "Explanation for both classes in inheritance 3"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 3",
          "explanation": "Explanation for compilation error in inheritance 3"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for inheritance question 3",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 3\npublic class BaseClass3\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 3\");\n}\n\npublic class DerivedClass3 : BaseClass3\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 3\");\n}\n\nBaseClass3 obj = new DerivedClass3();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0004",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 4",
          "explanation": "Explanation for base class in inheritance 4"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 4",
          "explanation": "Explanation for derived class in inheritance 4"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 4",
          "explanation": "Explanation for both classes in inheritance 4"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 4",
          "explanation": "Explanation for compilation error in inheritance 4"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 4",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 4\npublic class BaseClass4\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 4\");\n}\n\npublic class DerivedClass4 : BaseClass4\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 4\");\n}\n\nBaseClass4 obj = new DerivedClass4();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0005",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 5",
          "explanation": "Explanation for base class in inheritance 5"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 5",
          "explanation": "Explanation for derived class in inheritance 5"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 5",
          "explanation": "Explanation for both classes in inheritance 5"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 5",
          "explanation": "Explanation for compilation error in inheritance 5"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 5",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 5\npublic class BaseClass5\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 5\");\n}\n\npublic class DerivedClass5 : BaseClass5\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 5\");\n}\n\nBaseClass5 obj = new DerivedClass5();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0006",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 6",
          "explanation": "Explanation for base class in inheritance 6"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 6",
          "explanation": "Explanation for derived class in inheritance 6"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 6",
          "explanation": "Explanation for both classes in inheritance 6"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 6",
          "explanation": "Explanation for compilation error in inheritance 6"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 6",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 6\npublic class BaseClass6\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 6\");\n}\n\npublic class DerivedClass6 : BaseClass6\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 6\");\n}\n\nBaseClass6 obj = new DerivedClass6();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0007",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 7",
          "explanation": "Explanation for base class in inheritance 7"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 7",
          "explanation": "Explanation for derived class in inheritance 7"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 7",
          "explanation": "Explanation for both classes in inheritance 7"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 7",
          "explanation": "Explanation for compilation error in inheritance 7"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 7",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 7\npublic class BaseClass7\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 7\");\n}\n\npublic class DerivedClass7 : BaseClass7\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 7\");\n}\n\nBaseClass7 obj = new DerivedClass7();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0008",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 8",
          "explanation": "Explanation for base class in inheritance 8"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 8",
          "explanation": "Explanation for derived class in inheritance 8"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 8",
          "explanation": "Explanation for both classes in inheritance 8"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 8",
          "explanation": "Explanation for compilation error in inheritance 8"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 8",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 8\npublic class BaseClass8\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 8\");\n}\n\npublic class DerivedClass8 : BaseClass8\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 8\");\n}\n\nBaseClass8 obj = new DerivedClass8();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0009",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 9",
          "explanation": "Explanation for base class in inheritance 9"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 9",
          "explanation": "Explanation for derived class in inheritance 9"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 9",
          "explanation": "Explanation for both classes in inheritance 9"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 9",
          "explanation": "Explanation for compilation error in inheritance 9"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 9",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 9\npublic class BaseClass9\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 9\");\n}\n\npublic class DerivedClass9 : BaseClass9\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 9\");\n}\n\nBaseClass9 obj = new DerivedClass9();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0010",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 10",
          "explanation": "Explanation for base class in inheritance 10"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 10",
          "explanation": "Explanation for derived class in inheritance 10"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 10",
          "explanation": "Explanation for both classes in inheritance 10"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 10",
          "explanation": "Explanation for compilation error in inheritance 10"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for inheritance question 10",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 10\npublic class BaseClass10\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 10\");\n}\n\npublic class DerivedClass10 : BaseClass10\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 10\");\n}\n\nBaseClass10 obj = new DerivedClass10();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0011",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 11",
          "explanation": "Explanation for base class in inheritance 11"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 11",
          "explanation": "Explanation for derived class in inheritance 11"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 11",
          "explanation": "Explanation for both classes in inheritance 11"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 11",
          "explanation": "Explanation for compilation error in inheritance 11"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for inheritance question 11",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 11\npublic class BaseClass11\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 11\");\n}\n\npublic class DerivedClass11 : BaseClass11\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 11\");\n}\n\nBaseClass11 obj = new DerivedClass11();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0012",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 12",
          "explanation": "Explanation for base class in inheritance 12"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 12",
          "explanation": "Explanation for derived class in inheritance 12"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 12",
          "explanation": "Explanation for both classes in inheritance 12"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 12",
          "explanation": "Explanation for compilation error in inheritance 12"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 12",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 12\npublic class BaseClass12\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 12\");\n}\n\npublic class DerivedClass12 : BaseClass12\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 12\");\n}\n\nBaseClass12 obj = new DerivedClass12();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0013",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 13",
          "explanation": "Explanation for base class in inheritance 13"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 13",
          "explanation": "Explanation for derived class in inheritance 13"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 13",
          "explanation": "Explanation for both classes in inheritance 13"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 13",
          "explanation": "Explanation for compilation error in inheritance 13"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for inheritance question 13",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 13\npublic class BaseClass13\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 13\");\n}\n\npublic class DerivedClass13 : BaseClass13\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 13\");\n}\n\nBaseClass13 obj = new DerivedClass13();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0014",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 14",
          "explanation": "Explanation for base class in inheritance 14"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 14",
          "explanation": "Explanation for derived class in inheritance 14"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 14",
          "explanation": "Explanation for both classes in inheritance 14"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 14",
          "explanation": "Explanation for compilation error in inheritance 14"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for inheritance question 14",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 14\npublic class BaseClass14\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 14\");\n}\n\npublic class DerivedClass14 : BaseClass14\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 14\");\n}\n\nBaseClass14 obj = new DerivedClass14();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0015",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 15",
          "explanation": "Explanation for base class in inheritance 15"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 15",
          "explanation": "Explanation for derived class in inheritance 15"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 15",
          "explanation": "Explanation for both classes in inheritance 15"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 15",
          "explanation": "Explanation for compilation error in inheritance 15"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for inheritance question 15",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 15\npublic class BaseClass15\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 15\");\n}\n\npublic class DerivedClass15 : BaseClass15\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 15\");\n}\n\nBaseClass15 obj = new DerivedClass15();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0016",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 16",
          "explanation": "Explanation for base class in inheritance 16"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 16",
          "explanation": "Explanation for derived class in inheritance 16"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 16",
          "explanation": "Explanation for both classes in inheritance 16"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 16",
          "explanation": "Explanation for compilation error in inheritance 16"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for inheritance question 16",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 16\npublic class BaseClass16\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 16\");\n}\n\npublic class DerivedClass16 : BaseClass16\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 16\");\n}\n\nBaseClass16 obj = new DerivedClass16();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0017",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 17",
          "explanation": "Explanation for base class in inheritance 17"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 17",
          "explanation": "Explanation for derived class in inheritance 17"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 17",
          "explanation": "Explanation for both classes in inheritance 17"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 17",
          "explanation": "Explanation for compilation error in inheritance 17"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 17",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 17\npublic class BaseClass17\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 17\");\n}\n\npublic class DerivedClass17 : BaseClass17\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 17\");\n}\n\nBaseClass17 obj = new DerivedClass17();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0018",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 18",
          "explanation": "Explanation for base class in inheritance 18"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 18",
          "explanation": "Explanation for derived class in inheritance 18"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 18",
          "explanation": "Explanation for both classes in inheritance 18"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 18",
          "explanation": "Explanation for compilation error in inheritance 18"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for inheritance question 18",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 18\npublic class BaseClass18\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 18\");\n}\n\npublic class DerivedClass18 : BaseClass18\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 18\");\n}\n\nBaseClass18 obj = new DerivedClass18();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0019",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 19",
          "explanation": "Explanation for base class in inheritance 19"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 19",
          "explanation": "Explanation for derived class in inheritance 19"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 19",
          "explanation": "Explanation for both classes in inheritance 19"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 19",
          "explanation": "Explanation for compilation error in inheritance 19"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 19",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 19\npublic class BaseClass19\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 19\");\n}\n\npublic class DerivedClass19 : BaseClass19\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 19\");\n}\n\nBaseClass19 obj = new DerivedClass19();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0020",
      "question": "What will be the output of this inheritance example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base class output for inheritance 20",
          "explanation": "Explanation for base class in inheritance 20"
        },
        {
          "id": "b",
          "text": "Derived class output for inheritance 20",
          "explanation": "Explanation for derived class in inheritance 20"
        },
        {
          "id": "c",
          "text": "Both outputs for inheritance 20",
          "explanation": "Explanation for both classes in inheritance 20"
        },
        {
          "id": "d",
          "text": "Compilation error for inheritance 20",
          "explanation": "Explanation for compilation error in inheritance 20"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for inheritance question 20",
      "codeExample": {
        "language": "csharp",
        "code": "// Inheritance example 20\npublic class BaseClass20\n{\n    public virtual void Display() => Console.WriteLine(\"Base Class 20\");\n}\n\npublic class DerivedClass20 : BaseClass20\n{\n    public override void Display() => Console.WriteLine(\"Derived Class 20\");\n}\n\nBaseClass20 obj = new DerivedClass20();\nobj.Display();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "inheritance",
        "polymorphism",
        "virtual",
        "override"
      ]
    },
    {
      "id": "oop-0021",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 21",
          "explanation": "Explanation for private access in encapsulation 21"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 21",
          "explanation": "Explanation for public access in encapsulation 21"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 21",
          "explanation": "Explanation for protected access in encapsulation 21"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 21",
          "explanation": "Explanation for compilation error in encapsulation 21"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for encapsulation question 21",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 21\npublic class EncapsulatedClass21\n{\n    private int _value = 21;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass21 obj = new EncapsulatedClass21();\nobj.Value = -21;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0022",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 22",
          "explanation": "Explanation for private access in encapsulation 22"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 22",
          "explanation": "Explanation for public access in encapsulation 22"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 22",
          "explanation": "Explanation for protected access in encapsulation 22"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 22",
          "explanation": "Explanation for compilation error in encapsulation 22"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for encapsulation question 22",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 22\npublic class EncapsulatedClass22\n{\n    private int _value = 22;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass22 obj = new EncapsulatedClass22();\nobj.Value = -22;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0023",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 23",
          "explanation": "Explanation for private access in encapsulation 23"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 23",
          "explanation": "Explanation for public access in encapsulation 23"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 23",
          "explanation": "Explanation for protected access in encapsulation 23"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 23",
          "explanation": "Explanation for compilation error in encapsulation 23"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 23",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 23\npublic class EncapsulatedClass23\n{\n    private int _value = 23;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass23 obj = new EncapsulatedClass23();\nobj.Value = -23;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0024",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 24",
          "explanation": "Explanation for private access in encapsulation 24"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 24",
          "explanation": "Explanation for public access in encapsulation 24"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 24",
          "explanation": "Explanation for protected access in encapsulation 24"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 24",
          "explanation": "Explanation for compilation error in encapsulation 24"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 24",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 24\npublic class EncapsulatedClass24\n{\n    private int _value = 24;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass24 obj = new EncapsulatedClass24();\nobj.Value = -24;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0025",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 25",
          "explanation": "Explanation for private access in encapsulation 25"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 25",
          "explanation": "Explanation for public access in encapsulation 25"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 25",
          "explanation": "Explanation for protected access in encapsulation 25"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 25",
          "explanation": "Explanation for compilation error in encapsulation 25"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 25",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 25\npublic class EncapsulatedClass25\n{\n    private int _value = 25;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass25 obj = new EncapsulatedClass25();\nobj.Value = -25;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0026",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 26",
          "explanation": "Explanation for private access in encapsulation 26"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 26",
          "explanation": "Explanation for public access in encapsulation 26"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 26",
          "explanation": "Explanation for protected access in encapsulation 26"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 26",
          "explanation": "Explanation for compilation error in encapsulation 26"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 26",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 26\npublic class EncapsulatedClass26\n{\n    private int _value = 26;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass26 obj = new EncapsulatedClass26();\nobj.Value = -26;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0027",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 27",
          "explanation": "Explanation for private access in encapsulation 27"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 27",
          "explanation": "Explanation for public access in encapsulation 27"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 27",
          "explanation": "Explanation for protected access in encapsulation 27"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 27",
          "explanation": "Explanation for compilation error in encapsulation 27"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 27",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 27\npublic class EncapsulatedClass27\n{\n    private int _value = 27;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass27 obj = new EncapsulatedClass27();\nobj.Value = -27;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0028",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 28",
          "explanation": "Explanation for private access in encapsulation 28"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 28",
          "explanation": "Explanation for public access in encapsulation 28"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 28",
          "explanation": "Explanation for protected access in encapsulation 28"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 28",
          "explanation": "Explanation for compilation error in encapsulation 28"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for encapsulation question 28",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 28\npublic class EncapsulatedClass28\n{\n    private int _value = 28;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass28 obj = new EncapsulatedClass28();\nobj.Value = -28;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0029",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 29",
          "explanation": "Explanation for private access in encapsulation 29"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 29",
          "explanation": "Explanation for public access in encapsulation 29"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 29",
          "explanation": "Explanation for protected access in encapsulation 29"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 29",
          "explanation": "Explanation for compilation error in encapsulation 29"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 29",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 29\npublic class EncapsulatedClass29\n{\n    private int _value = 29;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass29 obj = new EncapsulatedClass29();\nobj.Value = -29;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0030",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 30",
          "explanation": "Explanation for private access in encapsulation 30"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 30",
          "explanation": "Explanation for public access in encapsulation 30"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 30",
          "explanation": "Explanation for protected access in encapsulation 30"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 30",
          "explanation": "Explanation for compilation error in encapsulation 30"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 30",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 30\npublic class EncapsulatedClass30\n{\n    private int _value = 30;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass30 obj = new EncapsulatedClass30();\nobj.Value = -30;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0031",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 31",
          "explanation": "Explanation for private access in encapsulation 31"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 31",
          "explanation": "Explanation for public access in encapsulation 31"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 31",
          "explanation": "Explanation for protected access in encapsulation 31"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 31",
          "explanation": "Explanation for compilation error in encapsulation 31"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 31",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 31\npublic class EncapsulatedClass31\n{\n    private int _value = 31;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass31 obj = new EncapsulatedClass31();\nobj.Value = -31;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0032",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 32",
          "explanation": "Explanation for private access in encapsulation 32"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 32",
          "explanation": "Explanation for public access in encapsulation 32"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 32",
          "explanation": "Explanation for protected access in encapsulation 32"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 32",
          "explanation": "Explanation for compilation error in encapsulation 32"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 32",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 32\npublic class EncapsulatedClass32\n{\n    private int _value = 32;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass32 obj = new EncapsulatedClass32();\nobj.Value = -32;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0033",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 33",
          "explanation": "Explanation for private access in encapsulation 33"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 33",
          "explanation": "Explanation for public access in encapsulation 33"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 33",
          "explanation": "Explanation for protected access in encapsulation 33"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 33",
          "explanation": "Explanation for compilation error in encapsulation 33"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for encapsulation question 33",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 33\npublic class EncapsulatedClass33\n{\n    private int _value = 33;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass33 obj = new EncapsulatedClass33();\nobj.Value = -33;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0034",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 34",
          "explanation": "Explanation for private access in encapsulation 34"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 34",
          "explanation": "Explanation for public access in encapsulation 34"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 34",
          "explanation": "Explanation for protected access in encapsulation 34"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 34",
          "explanation": "Explanation for compilation error in encapsulation 34"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for encapsulation question 34",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 34\npublic class EncapsulatedClass34\n{\n    private int _value = 34;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass34 obj = new EncapsulatedClass34();\nobj.Value = -34;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0035",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 35",
          "explanation": "Explanation for private access in encapsulation 35"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 35",
          "explanation": "Explanation for public access in encapsulation 35"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 35",
          "explanation": "Explanation for protected access in encapsulation 35"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 35",
          "explanation": "Explanation for compilation error in encapsulation 35"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for encapsulation question 35",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 35\npublic class EncapsulatedClass35\n{\n    private int _value = 35;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass35 obj = new EncapsulatedClass35();\nobj.Value = -35;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0036",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 36",
          "explanation": "Explanation for private access in encapsulation 36"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 36",
          "explanation": "Explanation for public access in encapsulation 36"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 36",
          "explanation": "Explanation for protected access in encapsulation 36"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 36",
          "explanation": "Explanation for compilation error in encapsulation 36"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 36",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 36\npublic class EncapsulatedClass36\n{\n    private int _value = 36;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass36 obj = new EncapsulatedClass36();\nobj.Value = -36;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0037",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 37",
          "explanation": "Explanation for private access in encapsulation 37"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 37",
          "explanation": "Explanation for public access in encapsulation 37"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 37",
          "explanation": "Explanation for protected access in encapsulation 37"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 37",
          "explanation": "Explanation for compilation error in encapsulation 37"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 37",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 37\npublic class EncapsulatedClass37\n{\n    private int _value = 37;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass37 obj = new EncapsulatedClass37();\nobj.Value = -37;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0038",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 38",
          "explanation": "Explanation for private access in encapsulation 38"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 38",
          "explanation": "Explanation for public access in encapsulation 38"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 38",
          "explanation": "Explanation for protected access in encapsulation 38"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 38",
          "explanation": "Explanation for compilation error in encapsulation 38"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for encapsulation question 38",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 38\npublic class EncapsulatedClass38\n{\n    private int _value = 38;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass38 obj = new EncapsulatedClass38();\nobj.Value = -38;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0039",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 39",
          "explanation": "Explanation for private access in encapsulation 39"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 39",
          "explanation": "Explanation for public access in encapsulation 39"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 39",
          "explanation": "Explanation for protected access in encapsulation 39"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 39",
          "explanation": "Explanation for compilation error in encapsulation 39"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 39",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 39\npublic class EncapsulatedClass39\n{\n    private int _value = 39;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass39 obj = new EncapsulatedClass39();\nobj.Value = -39;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0040",
      "question": "What will be the result of this encapsulation example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Private access for encapsulation 40",
          "explanation": "Explanation for private access in encapsulation 40"
        },
        {
          "id": "b",
          "text": "Public access for encapsulation 40",
          "explanation": "Explanation for public access in encapsulation 40"
        },
        {
          "id": "c",
          "text": "Protected access for encapsulation 40",
          "explanation": "Explanation for protected access in encapsulation 40"
        },
        {
          "id": "d",
          "text": "Compilation error for encapsulation 40",
          "explanation": "Explanation for compilation error in encapsulation 40"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for encapsulation question 40",
      "codeExample": {
        "language": "csharp",
        "code": "// Encapsulation example 40\npublic class EncapsulatedClass40\n{\n    private int _value = 40;\n    \n    public int Value\n    {\n        get => _value;\n        set => _value = value > 0 ? value : 0;\n    }\n}\n\nEncapsulatedClass40 obj = new EncapsulatedClass40();\nobj.Value = -40;\nConsole.WriteLine(obj.Value);"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "encapsulation",
        "properties",
        "access-modifiers"
      ]
    },
    {
      "id": "oop-0041",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 41",
          "explanation": "Explanation for base method in polymorphism 41"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 41",
          "explanation": "Explanation for derived method in polymorphism 41"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 41",
          "explanation": "Explanation for interface method in polymorphism 41"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 41",
          "explanation": "Explanation for abstract method in polymorphism 41"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for polymorphism question 41",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 41\npublic abstract class Shape41\n{\n    public abstract double GetArea();\n}\n\npublic class Circle41 : Shape41\n{\n    private double radius = 41;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape41 shape = new Circle41();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 7,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0042",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 42",
          "explanation": "Explanation for base method in polymorphism 42"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 42",
          "explanation": "Explanation for derived method in polymorphism 42"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 42",
          "explanation": "Explanation for interface method in polymorphism 42"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 42",
          "explanation": "Explanation for abstract method in polymorphism 42"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 42",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 42\npublic abstract class Shape42\n{\n    public abstract double GetArea();\n}\n\npublic class Circle42 : Shape42\n{\n    private double radius = 42;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape42 shape = new Circle42();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0043",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 43",
          "explanation": "Explanation for base method in polymorphism 43"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 43",
          "explanation": "Explanation for derived method in polymorphism 43"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 43",
          "explanation": "Explanation for interface method in polymorphism 43"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 43",
          "explanation": "Explanation for abstract method in polymorphism 43"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for polymorphism question 43",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 43\npublic abstract class Shape43\n{\n    public abstract double GetArea();\n}\n\npublic class Circle43 : Shape43\n{\n    private double radius = 43;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape43 shape = new Circle43();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0044",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 44",
          "explanation": "Explanation for base method in polymorphism 44"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 44",
          "explanation": "Explanation for derived method in polymorphism 44"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 44",
          "explanation": "Explanation for interface method in polymorphism 44"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 44",
          "explanation": "Explanation for abstract method in polymorphism 44"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 44",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 44\npublic abstract class Shape44\n{\n    public abstract double GetArea();\n}\n\npublic class Circle44 : Shape44\n{\n    private double radius = 44;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape44 shape = new Circle44();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0045",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 45",
          "explanation": "Explanation for base method in polymorphism 45"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 45",
          "explanation": "Explanation for derived method in polymorphism 45"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 45",
          "explanation": "Explanation for interface method in polymorphism 45"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 45",
          "explanation": "Explanation for abstract method in polymorphism 45"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for polymorphism question 45",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 45\npublic abstract class Shape45\n{\n    public abstract double GetArea();\n}\n\npublic class Circle45 : Shape45\n{\n    private double radius = 45;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape45 shape = new Circle45();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0046",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 46",
          "explanation": "Explanation for base method in polymorphism 46"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 46",
          "explanation": "Explanation for derived method in polymorphism 46"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 46",
          "explanation": "Explanation for interface method in polymorphism 46"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 46",
          "explanation": "Explanation for abstract method in polymorphism 46"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 46",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 46\npublic abstract class Shape46\n{\n    public abstract double GetArea();\n}\n\npublic class Circle46 : Shape46\n{\n    private double radius = 46;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape46 shape = new Circle46();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0047",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 47",
          "explanation": "Explanation for base method in polymorphism 47"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 47",
          "explanation": "Explanation for derived method in polymorphism 47"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 47",
          "explanation": "Explanation for interface method in polymorphism 47"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 47",
          "explanation": "Explanation for abstract method in polymorphism 47"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 47",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 47\npublic abstract class Shape47\n{\n    public abstract double GetArea();\n}\n\npublic class Circle47 : Shape47\n{\n    private double radius = 47;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape47 shape = new Circle47();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0048",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 48",
          "explanation": "Explanation for base method in polymorphism 48"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 48",
          "explanation": "Explanation for derived method in polymorphism 48"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 48",
          "explanation": "Explanation for interface method in polymorphism 48"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 48",
          "explanation": "Explanation for abstract method in polymorphism 48"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for polymorphism question 48",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 48\npublic abstract class Shape48\n{\n    public abstract double GetArea();\n}\n\npublic class Circle48 : Shape48\n{\n    private double radius = 48;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape48 shape = new Circle48();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 7,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0049",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 49",
          "explanation": "Explanation for base method in polymorphism 49"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 49",
          "explanation": "Explanation for derived method in polymorphism 49"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 49",
          "explanation": "Explanation for interface method in polymorphism 49"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 49",
          "explanation": "Explanation for abstract method in polymorphism 49"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for polymorphism question 49",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 49\npublic abstract class Shape49\n{\n    public abstract double GetArea();\n}\n\npublic class Circle49 : Shape49\n{\n    private double radius = 49;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape49 shape = new Circle49();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0050",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 50",
          "explanation": "Explanation for base method in polymorphism 50"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 50",
          "explanation": "Explanation for derived method in polymorphism 50"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 50",
          "explanation": "Explanation for interface method in polymorphism 50"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 50",
          "explanation": "Explanation for abstract method in polymorphism 50"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 50",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 50\npublic abstract class Shape50\n{\n    public abstract double GetArea();\n}\n\npublic class Circle50 : Shape50\n{\n    private double radius = 50;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape50 shape = new Circle50();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 7,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0051",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 51",
          "explanation": "Explanation for base method in polymorphism 51"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 51",
          "explanation": "Explanation for derived method in polymorphism 51"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 51",
          "explanation": "Explanation for interface method in polymorphism 51"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 51",
          "explanation": "Explanation for abstract method in polymorphism 51"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 51",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 51\npublic abstract class Shape51\n{\n    public abstract double GetArea();\n}\n\npublic class Circle51 : Shape51\n{\n    private double radius = 51;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape51 shape = new Circle51();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0052",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 52",
          "explanation": "Explanation for base method in polymorphism 52"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 52",
          "explanation": "Explanation for derived method in polymorphism 52"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 52",
          "explanation": "Explanation for interface method in polymorphism 52"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 52",
          "explanation": "Explanation for abstract method in polymorphism 52"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for polymorphism question 52",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 52\npublic abstract class Shape52\n{\n    public abstract double GetArea();\n}\n\npublic class Circle52 : Shape52\n{\n    private double radius = 52;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape52 shape = new Circle52();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0053",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 53",
          "explanation": "Explanation for base method in polymorphism 53"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 53",
          "explanation": "Explanation for derived method in polymorphism 53"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 53",
          "explanation": "Explanation for interface method in polymorphism 53"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 53",
          "explanation": "Explanation for abstract method in polymorphism 53"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 53",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 53\npublic abstract class Shape53\n{\n    public abstract double GetArea();\n}\n\npublic class Circle53 : Shape53\n{\n    private double radius = 53;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape53 shape = new Circle53();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0054",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 54",
          "explanation": "Explanation for base method in polymorphism 54"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 54",
          "explanation": "Explanation for derived method in polymorphism 54"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 54",
          "explanation": "Explanation for interface method in polymorphism 54"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 54",
          "explanation": "Explanation for abstract method in polymorphism 54"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 54",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 54\npublic abstract class Shape54\n{\n    public abstract double GetArea();\n}\n\npublic class Circle54 : Shape54\n{\n    private double radius = 54;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape54 shape = new Circle54();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0055",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 55",
          "explanation": "Explanation for base method in polymorphism 55"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 55",
          "explanation": "Explanation for derived method in polymorphism 55"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 55",
          "explanation": "Explanation for interface method in polymorphism 55"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 55",
          "explanation": "Explanation for abstract method in polymorphism 55"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 55",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 55\npublic abstract class Shape55\n{\n    public abstract double GetArea();\n}\n\npublic class Circle55 : Shape55\n{\n    private double radius = 55;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape55 shape = new Circle55();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0056",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 56",
          "explanation": "Explanation for base method in polymorphism 56"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 56",
          "explanation": "Explanation for derived method in polymorphism 56"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 56",
          "explanation": "Explanation for interface method in polymorphism 56"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 56",
          "explanation": "Explanation for abstract method in polymorphism 56"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 56",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 56\npublic abstract class Shape56\n{\n    public abstract double GetArea();\n}\n\npublic class Circle56 : Shape56\n{\n    private double radius = 56;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape56 shape = new Circle56();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 7,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0057",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 57",
          "explanation": "Explanation for base method in polymorphism 57"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 57",
          "explanation": "Explanation for derived method in polymorphism 57"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 57",
          "explanation": "Explanation for interface method in polymorphism 57"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 57",
          "explanation": "Explanation for abstract method in polymorphism 57"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for polymorphism question 57",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 57\npublic abstract class Shape57\n{\n    public abstract double GetArea();\n}\n\npublic class Circle57 : Shape57\n{\n    private double radius = 57;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape57 shape = new Circle57();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 7,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0058",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 58",
          "explanation": "Explanation for base method in polymorphism 58"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 58",
          "explanation": "Explanation for derived method in polymorphism 58"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 58",
          "explanation": "Explanation for interface method in polymorphism 58"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 58",
          "explanation": "Explanation for abstract method in polymorphism 58"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for polymorphism question 58",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 58\npublic abstract class Shape58\n{\n    public abstract double GetArea();\n}\n\npublic class Circle58 : Shape58\n{\n    private double radius = 58;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape58 shape = new Circle58();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0059",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 59",
          "explanation": "Explanation for base method in polymorphism 59"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 59",
          "explanation": "Explanation for derived method in polymorphism 59"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 59",
          "explanation": "Explanation for interface method in polymorphism 59"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 59",
          "explanation": "Explanation for abstract method in polymorphism 59"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for polymorphism question 59",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 59\npublic abstract class Shape59\n{\n    public abstract double GetArea();\n}\n\npublic class Circle59 : Shape59\n{\n    private double radius = 59;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape59 shape = new Circle59();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0060",
      "question": "What will be the output of this polymorphism example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Base method for polymorphism 60",
          "explanation": "Explanation for base method in polymorphism 60"
        },
        {
          "id": "b",
          "text": "Derived method for polymorphism 60",
          "explanation": "Explanation for derived method in polymorphism 60"
        },
        {
          "id": "c",
          "text": "Interface method for polymorphism 60",
          "explanation": "Explanation for interface method in polymorphism 60"
        },
        {
          "id": "d",
          "text": "Abstract method for polymorphism 60",
          "explanation": "Explanation for abstract method in polymorphism 60"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for polymorphism question 60",
      "codeExample": {
        "language": "csharp",
        "code": "// Polymorphism example 60\npublic abstract class Shape60\n{\n    public abstract double GetArea();\n}\n\npublic class Circle60 : Shape60\n{\n    private double radius = 60;\n    public override double GetArea() => Math.PI * radius * radius;\n}\n\nShape60 shape = new Circle60();\nConsole.WriteLine(shape.GetArea());"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "polymorphism",
        "abstract",
        "interfaces",
        "virtual"
      ]
    },
    {
      "id": "oop-0061",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 61",
          "explanation": "Explanation for interface implementation in abstraction 61"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 61",
          "explanation": "Explanation for abstract class in abstraction 61"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 61",
          "explanation": "Explanation for concrete implementation in abstraction 61"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 61",
          "explanation": "Explanation for compilation error in abstraction 61"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 61",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 61\npublic interface IProcessable61\n{\n    void Process();\n}\n\npublic class Processor61 : IProcessable61\n{\n    public void Process() => Console.WriteLine(\"Processing 61\");\n}\n\nIProcessable61 processor = new Processor61();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0062",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 62",
          "explanation": "Explanation for interface implementation in abstraction 62"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 62",
          "explanation": "Explanation for abstract class in abstraction 62"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 62",
          "explanation": "Explanation for concrete implementation in abstraction 62"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 62",
          "explanation": "Explanation for compilation error in abstraction 62"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for abstraction question 62",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 62\npublic interface IProcessable62\n{\n    void Process();\n}\n\npublic class Processor62 : IProcessable62\n{\n    public void Process() => Console.WriteLine(\"Processing 62\");\n}\n\nIProcessable62 processor = new Processor62();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0063",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 63",
          "explanation": "Explanation for interface implementation in abstraction 63"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 63",
          "explanation": "Explanation for abstract class in abstraction 63"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 63",
          "explanation": "Explanation for concrete implementation in abstraction 63"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 63",
          "explanation": "Explanation for compilation error in abstraction 63"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for abstraction question 63",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 63\npublic interface IProcessable63\n{\n    void Process();\n}\n\npublic class Processor63 : IProcessable63\n{\n    public void Process() => Console.WriteLine(\"Processing 63\");\n}\n\nIProcessable63 processor = new Processor63();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0064",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 64",
          "explanation": "Explanation for interface implementation in abstraction 64"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 64",
          "explanation": "Explanation for abstract class in abstraction 64"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 64",
          "explanation": "Explanation for concrete implementation in abstraction 64"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 64",
          "explanation": "Explanation for compilation error in abstraction 64"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for abstraction question 64",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 64\npublic interface IProcessable64\n{\n    void Process();\n}\n\npublic class Processor64 : IProcessable64\n{\n    public void Process() => Console.WriteLine(\"Processing 64\");\n}\n\nIProcessable64 processor = new Processor64();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0065",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 65",
          "explanation": "Explanation for interface implementation in abstraction 65"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 65",
          "explanation": "Explanation for abstract class in abstraction 65"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 65",
          "explanation": "Explanation for concrete implementation in abstraction 65"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 65",
          "explanation": "Explanation for compilation error in abstraction 65"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for abstraction question 65",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 65\npublic interface IProcessable65\n{\n    void Process();\n}\n\npublic class Processor65 : IProcessable65\n{\n    public void Process() => Console.WriteLine(\"Processing 65\");\n}\n\nIProcessable65 processor = new Processor65();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0066",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 66",
          "explanation": "Explanation for interface implementation in abstraction 66"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 66",
          "explanation": "Explanation for abstract class in abstraction 66"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 66",
          "explanation": "Explanation for concrete implementation in abstraction 66"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 66",
          "explanation": "Explanation for compilation error in abstraction 66"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 66",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 66\npublic interface IProcessable66\n{\n    void Process();\n}\n\npublic class Processor66 : IProcessable66\n{\n    public void Process() => Console.WriteLine(\"Processing 66\");\n}\n\nIProcessable66 processor = new Processor66();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0067",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 67",
          "explanation": "Explanation for interface implementation in abstraction 67"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 67",
          "explanation": "Explanation for abstract class in abstraction 67"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 67",
          "explanation": "Explanation for concrete implementation in abstraction 67"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 67",
          "explanation": "Explanation for compilation error in abstraction 67"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for abstraction question 67",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 67\npublic interface IProcessable67\n{\n    void Process();\n}\n\npublic class Processor67 : IProcessable67\n{\n    public void Process() => Console.WriteLine(\"Processing 67\");\n}\n\nIProcessable67 processor = new Processor67();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0068",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 68",
          "explanation": "Explanation for interface implementation in abstraction 68"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 68",
          "explanation": "Explanation for abstract class in abstraction 68"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 68",
          "explanation": "Explanation for concrete implementation in abstraction 68"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 68",
          "explanation": "Explanation for compilation error in abstraction 68"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 68",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 68\npublic interface IProcessable68\n{\n    void Process();\n}\n\npublic class Processor68 : IProcessable68\n{\n    public void Process() => Console.WriteLine(\"Processing 68\");\n}\n\nIProcessable68 processor = new Processor68();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0069",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 69",
          "explanation": "Explanation for interface implementation in abstraction 69"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 69",
          "explanation": "Explanation for abstract class in abstraction 69"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 69",
          "explanation": "Explanation for concrete implementation in abstraction 69"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 69",
          "explanation": "Explanation for compilation error in abstraction 69"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for abstraction question 69",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 69\npublic interface IProcessable69\n{\n    void Process();\n}\n\npublic class Processor69 : IProcessable69\n{\n    public void Process() => Console.WriteLine(\"Processing 69\");\n}\n\nIProcessable69 processor = new Processor69();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0070",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 70",
          "explanation": "Explanation for interface implementation in abstraction 70"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 70",
          "explanation": "Explanation for abstract class in abstraction 70"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 70",
          "explanation": "Explanation for concrete implementation in abstraction 70"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 70",
          "explanation": "Explanation for compilation error in abstraction 70"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 70",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 70\npublic interface IProcessable70\n{\n    void Process();\n}\n\npublic class Processor70 : IProcessable70\n{\n    public void Process() => Console.WriteLine(\"Processing 70\");\n}\n\nIProcessable70 processor = new Processor70();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0071",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 71",
          "explanation": "Explanation for interface implementation in abstraction 71"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 71",
          "explanation": "Explanation for abstract class in abstraction 71"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 71",
          "explanation": "Explanation for concrete implementation in abstraction 71"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 71",
          "explanation": "Explanation for compilation error in abstraction 71"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for abstraction question 71",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 71\npublic interface IProcessable71\n{\n    void Process();\n}\n\npublic class Processor71 : IProcessable71\n{\n    public void Process() => Console.WriteLine(\"Processing 71\");\n}\n\nIProcessable71 processor = new Processor71();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0072",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 72",
          "explanation": "Explanation for interface implementation in abstraction 72"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 72",
          "explanation": "Explanation for abstract class in abstraction 72"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 72",
          "explanation": "Explanation for concrete implementation in abstraction 72"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 72",
          "explanation": "Explanation for compilation error in abstraction 72"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 72",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 72\npublic interface IProcessable72\n{\n    void Process();\n}\n\npublic class Processor72 : IProcessable72\n{\n    public void Process() => Console.WriteLine(\"Processing 72\");\n}\n\nIProcessable72 processor = new Processor72();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0073",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 73",
          "explanation": "Explanation for interface implementation in abstraction 73"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 73",
          "explanation": "Explanation for abstract class in abstraction 73"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 73",
          "explanation": "Explanation for concrete implementation in abstraction 73"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 73",
          "explanation": "Explanation for compilation error in abstraction 73"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for abstraction question 73",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 73\npublic interface IProcessable73\n{\n    void Process();\n}\n\npublic class Processor73 : IProcessable73\n{\n    public void Process() => Console.WriteLine(\"Processing 73\");\n}\n\nIProcessable73 processor = new Processor73();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0074",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 74",
          "explanation": "Explanation for interface implementation in abstraction 74"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 74",
          "explanation": "Explanation for abstract class in abstraction 74"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 74",
          "explanation": "Explanation for concrete implementation in abstraction 74"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 74",
          "explanation": "Explanation for compilation error in abstraction 74"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for abstraction question 74",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 74\npublic interface IProcessable74\n{\n    void Process();\n}\n\npublic class Processor74 : IProcessable74\n{\n    public void Process() => Console.WriteLine(\"Processing 74\");\n}\n\nIProcessable74 processor = new Processor74();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0075",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 75",
          "explanation": "Explanation for interface implementation in abstraction 75"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 75",
          "explanation": "Explanation for abstract class in abstraction 75"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 75",
          "explanation": "Explanation for concrete implementation in abstraction 75"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 75",
          "explanation": "Explanation for compilation error in abstraction 75"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for abstraction question 75",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 75\npublic interface IProcessable75\n{\n    void Process();\n}\n\npublic class Processor75 : IProcessable75\n{\n    public void Process() => Console.WriteLine(\"Processing 75\");\n}\n\nIProcessable75 processor = new Processor75();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0076",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 76",
          "explanation": "Explanation for interface implementation in abstraction 76"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 76",
          "explanation": "Explanation for abstract class in abstraction 76"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 76",
          "explanation": "Explanation for concrete implementation in abstraction 76"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 76",
          "explanation": "Explanation for compilation error in abstraction 76"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for abstraction question 76",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 76\npublic interface IProcessable76\n{\n    void Process();\n}\n\npublic class Processor76 : IProcessable76\n{\n    public void Process() => Console.WriteLine(\"Processing 76\");\n}\n\nIProcessable76 processor = new Processor76();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 6,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0077",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 77",
          "explanation": "Explanation for interface implementation in abstraction 77"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 77",
          "explanation": "Explanation for abstract class in abstraction 77"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 77",
          "explanation": "Explanation for concrete implementation in abstraction 77"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 77",
          "explanation": "Explanation for compilation error in abstraction 77"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for abstraction question 77",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 77\npublic interface IProcessable77\n{\n    void Process();\n}\n\npublic class Processor77 : IProcessable77\n{\n    public void Process() => Console.WriteLine(\"Processing 77\");\n}\n\nIProcessable77 processor = new Processor77();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0078",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 78",
          "explanation": "Explanation for interface implementation in abstraction 78"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 78",
          "explanation": "Explanation for abstract class in abstraction 78"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 78",
          "explanation": "Explanation for concrete implementation in abstraction 78"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 78",
          "explanation": "Explanation for compilation error in abstraction 78"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 78",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 78\npublic interface IProcessable78\n{\n    void Process();\n}\n\npublic class Processor78 : IProcessable78\n{\n    public void Process() => Console.WriteLine(\"Processing 78\");\n}\n\nIProcessable78 processor = new Processor78();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0079",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 79",
          "explanation": "Explanation for interface implementation in abstraction 79"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 79",
          "explanation": "Explanation for abstract class in abstraction 79"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 79",
          "explanation": "Explanation for concrete implementation in abstraction 79"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 79",
          "explanation": "Explanation for compilation error in abstraction 79"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for abstraction question 79",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 79\npublic interface IProcessable79\n{\n    void Process();\n}\n\npublic class Processor79 : IProcessable79\n{\n    public void Process() => Console.WriteLine(\"Processing 79\");\n}\n\nIProcessable79 processor = new Processor79();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0080",
      "question": "What will be the result of this abstraction example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Interface implementation for abstraction 80",
          "explanation": "Explanation for interface implementation in abstraction 80"
        },
        {
          "id": "b",
          "text": "Abstract class for abstraction 80",
          "explanation": "Explanation for abstract class in abstraction 80"
        },
        {
          "id": "c",
          "text": "Concrete implementation for abstraction 80",
          "explanation": "Explanation for concrete implementation in abstraction 80"
        },
        {
          "id": "d",
          "text": "Compilation error for abstraction 80",
          "explanation": "Explanation for compilation error in abstraction 80"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for abstraction question 80",
      "codeExample": {
        "language": "csharp",
        "code": "// Abstraction example 80\npublic interface IProcessable80\n{\n    void Process();\n}\n\npublic class Processor80 : IProcessable80\n{\n    public void Process() => Console.WriteLine(\"Processing 80\");\n}\n\nIProcessable80 processor = new Processor80();\nprocessor.Process();"
      },
      "category": "advanced",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "abstraction",
        "interfaces",
        "abstract-classes"
      ]
    },
    {
      "id": "oop-0081",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 81",
          "explanation": "Explanation for constructor in object 81"
        },
        {
          "id": "b",
          "text": "Destructor called for object 81",
          "explanation": "Explanation for destructor in object 81"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 81",
          "explanation": "Explanation for both constructor and destructor in object 81"
        },
        {
          "id": "d",
          "text": "Static constructor for object 81",
          "explanation": "Explanation for static constructor in object 81"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 81",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 81\npublic class Object81\n{\n    static Object81() => Console.WriteLine(\"Static constructor 81\");\n    \n    public Object81() => Console.WriteLine(\"Instance constructor 81\");\n    \n    ~Object81() => Console.WriteLine(\"Destructor 81\");\n}\n\nObject81 obj = new Object81();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 4,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0082",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 82",
          "explanation": "Explanation for constructor in object 82"
        },
        {
          "id": "b",
          "text": "Destructor called for object 82",
          "explanation": "Explanation for destructor in object 82"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 82",
          "explanation": "Explanation for both constructor and destructor in object 82"
        },
        {
          "id": "d",
          "text": "Static constructor for object 82",
          "explanation": "Explanation for static constructor in object 82"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for constructor/destructor question 82",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 82\npublic class Object82\n{\n    static Object82() => Console.WriteLine(\"Static constructor 82\");\n    \n    public Object82() => Console.WriteLine(\"Instance constructor 82\");\n    \n    ~Object82() => Console.WriteLine(\"Destructor 82\");\n}\n\nObject82 obj = new Object82();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0083",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 83",
          "explanation": "Explanation for constructor in object 83"
        },
        {
          "id": "b",
          "text": "Destructor called for object 83",
          "explanation": "Explanation for destructor in object 83"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 83",
          "explanation": "Explanation for both constructor and destructor in object 83"
        },
        {
          "id": "d",
          "text": "Static constructor for object 83",
          "explanation": "Explanation for static constructor in object 83"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for constructor/destructor question 83",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 83\npublic class Object83\n{\n    static Object83() => Console.WriteLine(\"Static constructor 83\");\n    \n    public Object83() => Console.WriteLine(\"Instance constructor 83\");\n    \n    ~Object83() => Console.WriteLine(\"Destructor 83\");\n}\n\nObject83 obj = new Object83();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0084",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 84",
          "explanation": "Explanation for constructor in object 84"
        },
        {
          "id": "b",
          "text": "Destructor called for object 84",
          "explanation": "Explanation for destructor in object 84"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 84",
          "explanation": "Explanation for both constructor and destructor in object 84"
        },
        {
          "id": "d",
          "text": "Static constructor for object 84",
          "explanation": "Explanation for static constructor in object 84"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 84",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 84\npublic class Object84\n{\n    static Object84() => Console.WriteLine(\"Static constructor 84\");\n    \n    public Object84() => Console.WriteLine(\"Instance constructor 84\");\n    \n    ~Object84() => Console.WriteLine(\"Destructor 84\");\n}\n\nObject84 obj = new Object84();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0085",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 85",
          "explanation": "Explanation for constructor in object 85"
        },
        {
          "id": "b",
          "text": "Destructor called for object 85",
          "explanation": "Explanation for destructor in object 85"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 85",
          "explanation": "Explanation for both constructor and destructor in object 85"
        },
        {
          "id": "d",
          "text": "Static constructor for object 85",
          "explanation": "Explanation for static constructor in object 85"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for constructor/destructor question 85",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 85\npublic class Object85\n{\n    static Object85() => Console.WriteLine(\"Static constructor 85\");\n    \n    public Object85() => Console.WriteLine(\"Instance constructor 85\");\n    \n    ~Object85() => Console.WriteLine(\"Destructor 85\");\n}\n\nObject85 obj = new Object85();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0086",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 86",
          "explanation": "Explanation for constructor in object 86"
        },
        {
          "id": "b",
          "text": "Destructor called for object 86",
          "explanation": "Explanation for destructor in object 86"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 86",
          "explanation": "Explanation for both constructor and destructor in object 86"
        },
        {
          "id": "d",
          "text": "Static constructor for object 86",
          "explanation": "Explanation for static constructor in object 86"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 86",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 86\npublic class Object86\n{\n    static Object86() => Console.WriteLine(\"Static constructor 86\");\n    \n    public Object86() => Console.WriteLine(\"Instance constructor 86\");\n    \n    ~Object86() => Console.WriteLine(\"Destructor 86\");\n}\n\nObject86 obj = new Object86();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0087",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 87",
          "explanation": "Explanation for constructor in object 87"
        },
        {
          "id": "b",
          "text": "Destructor called for object 87",
          "explanation": "Explanation for destructor in object 87"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 87",
          "explanation": "Explanation for both constructor and destructor in object 87"
        },
        {
          "id": "d",
          "text": "Static constructor for object 87",
          "explanation": "Explanation for static constructor in object 87"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 87",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 87\npublic class Object87\n{\n    static Object87() => Console.WriteLine(\"Static constructor 87\");\n    \n    public Object87() => Console.WriteLine(\"Instance constructor 87\");\n    \n    ~Object87() => Console.WriteLine(\"Destructor 87\");\n}\n\nObject87 obj = new Object87();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0088",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 88",
          "explanation": "Explanation for constructor in object 88"
        },
        {
          "id": "b",
          "text": "Destructor called for object 88",
          "explanation": "Explanation for destructor in object 88"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 88",
          "explanation": "Explanation for both constructor and destructor in object 88"
        },
        {
          "id": "d",
          "text": "Static constructor for object 88",
          "explanation": "Explanation for static constructor in object 88"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 88",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 88\npublic class Object88\n{\n    static Object88() => Console.WriteLine(\"Static constructor 88\");\n    \n    public Object88() => Console.WriteLine(\"Instance constructor 88\");\n    \n    ~Object88() => Console.WriteLine(\"Destructor 88\");\n}\n\nObject88 obj = new Object88();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0089",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 89",
          "explanation": "Explanation for constructor in object 89"
        },
        {
          "id": "b",
          "text": "Destructor called for object 89",
          "explanation": "Explanation for destructor in object 89"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 89",
          "explanation": "Explanation for both constructor and destructor in object 89"
        },
        {
          "id": "d",
          "text": "Static constructor for object 89",
          "explanation": "Explanation for static constructor in object 89"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for constructor/destructor question 89",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 89\npublic class Object89\n{\n    static Object89() => Console.WriteLine(\"Static constructor 89\");\n    \n    public Object89() => Console.WriteLine(\"Instance constructor 89\");\n    \n    ~Object89() => Console.WriteLine(\"Destructor 89\");\n}\n\nObject89 obj = new Object89();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0090",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 90",
          "explanation": "Explanation for constructor in object 90"
        },
        {
          "id": "b",
          "text": "Destructor called for object 90",
          "explanation": "Explanation for destructor in object 90"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 90",
          "explanation": "Explanation for both constructor and destructor in object 90"
        },
        {
          "id": "d",
          "text": "Static constructor for object 90",
          "explanation": "Explanation for static constructor in object 90"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 90",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 90\npublic class Object90\n{\n    static Object90() => Console.WriteLine(\"Static constructor 90\");\n    \n    public Object90() => Console.WriteLine(\"Instance constructor 90\");\n    \n    ~Object90() => Console.WriteLine(\"Destructor 90\");\n}\n\nObject90 obj = new Object90();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0091",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 91",
          "explanation": "Explanation for constructor in object 91"
        },
        {
          "id": "b",
          "text": "Destructor called for object 91",
          "explanation": "Explanation for destructor in object 91"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 91",
          "explanation": "Explanation for both constructor and destructor in object 91"
        },
        {
          "id": "d",
          "text": "Static constructor for object 91",
          "explanation": "Explanation for static constructor in object 91"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 91",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 91\npublic class Object91\n{\n    static Object91() => Console.WriteLine(\"Static constructor 91\");\n    \n    public Object91() => Console.WriteLine(\"Instance constructor 91\");\n    \n    ~Object91() => Console.WriteLine(\"Destructor 91\");\n}\n\nObject91 obj = new Object91();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0092",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 92",
          "explanation": "Explanation for constructor in object 92"
        },
        {
          "id": "b",
          "text": "Destructor called for object 92",
          "explanation": "Explanation for destructor in object 92"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 92",
          "explanation": "Explanation for both constructor and destructor in object 92"
        },
        {
          "id": "d",
          "text": "Static constructor for object 92",
          "explanation": "Explanation for static constructor in object 92"
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Detailed explanation for constructor/destructor question 92",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 92\npublic class Object92\n{\n    static Object92() => Console.WriteLine(\"Static constructor 92\");\n    \n    public Object92() => Console.WriteLine(\"Instance constructor 92\");\n    \n    ~Object92() => Console.WriteLine(\"Destructor 92\");\n}\n\nObject92 obj = new Object92();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0093",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 93",
          "explanation": "Explanation for constructor in object 93"
        },
        {
          "id": "b",
          "text": "Destructor called for object 93",
          "explanation": "Explanation for destructor in object 93"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 93",
          "explanation": "Explanation for both constructor and destructor in object 93"
        },
        {
          "id": "d",
          "text": "Static constructor for object 93",
          "explanation": "Explanation for static constructor in object 93"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 93",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 93\npublic class Object93\n{\n    static Object93() => Console.WriteLine(\"Static constructor 93\");\n    \n    public Object93() => Console.WriteLine(\"Instance constructor 93\");\n    \n    ~Object93() => Console.WriteLine(\"Destructor 93\");\n}\n\nObject93 obj = new Object93();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0094",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 94",
          "explanation": "Explanation for constructor in object 94"
        },
        {
          "id": "b",
          "text": "Destructor called for object 94",
          "explanation": "Explanation for destructor in object 94"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 94",
          "explanation": "Explanation for both constructor and destructor in object 94"
        },
        {
          "id": "d",
          "text": "Static constructor for object 94",
          "explanation": "Explanation for static constructor in object 94"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 94",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 94\npublic class Object94\n{\n    static Object94() => Console.WriteLine(\"Static constructor 94\");\n    \n    public Object94() => Console.WriteLine(\"Instance constructor 94\");\n    \n    ~Object94() => Console.WriteLine(\"Destructor 94\");\n}\n\nObject94 obj = new Object94();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0095",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 95",
          "explanation": "Explanation for constructor in object 95"
        },
        {
          "id": "b",
          "text": "Destructor called for object 95",
          "explanation": "Explanation for destructor in object 95"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 95",
          "explanation": "Explanation for both constructor and destructor in object 95"
        },
        {
          "id": "d",
          "text": "Static constructor for object 95",
          "explanation": "Explanation for static constructor in object 95"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 95",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 95\npublic class Object95\n{\n    static Object95() => Console.WriteLine(\"Static constructor 95\");\n    \n    public Object95() => Console.WriteLine(\"Instance constructor 95\");\n    \n    ~Object95() => Console.WriteLine(\"Destructor 95\");\n}\n\nObject95 obj = new Object95();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 5,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0096",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 96",
          "explanation": "Explanation for constructor in object 96"
        },
        {
          "id": "b",
          "text": "Destructor called for object 96",
          "explanation": "Explanation for destructor in object 96"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 96",
          "explanation": "Explanation for both constructor and destructor in object 96"
        },
        {
          "id": "d",
          "text": "Static constructor for object 96",
          "explanation": "Explanation for static constructor in object 96"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for constructor/destructor question 96",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 96\npublic class Object96\n{\n    static Object96() => Console.WriteLine(\"Static constructor 96\");\n    \n    public Object96() => Console.WriteLine(\"Instance constructor 96\");\n    \n    ~Object96() => Console.WriteLine(\"Destructor 96\");\n}\n\nObject96 obj = new Object96();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0097",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 97",
          "explanation": "Explanation for constructor in object 97"
        },
        {
          "id": "b",
          "text": "Destructor called for object 97",
          "explanation": "Explanation for destructor in object 97"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 97",
          "explanation": "Explanation for both constructor and destructor in object 97"
        },
        {
          "id": "d",
          "text": "Static constructor for object 97",
          "explanation": "Explanation for static constructor in object 97"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 97",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 97\npublic class Object97\n{\n    static Object97() => Console.WriteLine(\"Static constructor 97\");\n    \n    public Object97() => Console.WriteLine(\"Instance constructor 97\");\n    \n    ~Object97() => Console.WriteLine(\"Destructor 97\");\n}\n\nObject97 obj = new Object97();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0098",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 98",
          "explanation": "Explanation for constructor in object 98"
        },
        {
          "id": "b",
          "text": "Destructor called for object 98",
          "explanation": "Explanation for destructor in object 98"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 98",
          "explanation": "Explanation for both constructor and destructor in object 98"
        },
        {
          "id": "d",
          "text": "Static constructor for object 98",
          "explanation": "Explanation for static constructor in object 98"
        }
      ],
      "correctAnswerIndex": 3,
      "explanation": "Detailed explanation for constructor/destructor question 98",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 98\npublic class Object98\n{\n    static Object98() => Console.WriteLine(\"Static constructor 98\");\n    \n    public Object98() => Console.WriteLine(\"Instance constructor 98\");\n    \n    ~Object98() => Console.WriteLine(\"Destructor 98\");\n}\n\nObject98 obj = new Object98();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0099",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 99",
          "explanation": "Explanation for constructor in object 99"
        },
        {
          "id": "b",
          "text": "Destructor called for object 99",
          "explanation": "Explanation for destructor in object 99"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 99",
          "explanation": "Explanation for both constructor and destructor in object 99"
        },
        {
          "id": "d",
          "text": "Static constructor for object 99",
          "explanation": "Explanation for static constructor in object 99"
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Detailed explanation for constructor/destructor question 99",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 99\npublic class Object99\n{\n    static Object99() => Console.WriteLine(\"Static constructor 99\");\n    \n    public Object99() => Console.WriteLine(\"Instance constructor 99\");\n    \n    ~Object99() => Console.WriteLine(\"Destructor 99\");\n}\n\nObject99 obj = new Object99();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 2,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    },
    {
      "id": "oop-0100",
      "question": "What will be the output of this constructor/destructor example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Constructor called for object 100",
          "explanation": "Explanation for constructor in object 100"
        },
        {
          "id": "b",
          "text": "Destructor called for object 100",
          "explanation": "Explanation for destructor in object 100"
        },
        {
          "id": "c",
          "text": "Both constructor and destructor for object 100",
          "explanation": "Explanation for both constructor and destructor in object 100"
        },
        {
          "id": "d",
          "text": "Static constructor for object 100",
          "explanation": "Explanation for static constructor in object 100"
        }
      ],
      "correctAnswerIndex": 2,
      "explanation": "Detailed explanation for constructor/destructor question 100",
      "codeExample": {
        "language": "csharp",
        "code": "// Constructor/Destructor example 100\npublic class Object100\n{\n    static Object100() => Console.WriteLine(\"Static constructor 100\");\n    \n    public Object100() => Console.WriteLine(\"Instance constructor 100\");\n    \n    ~Object100() => Console.WriteLine(\"Destructor 100\");\n}\n\nObject100 obj = new Object100();"
      },
      "category": "intermediate",
      "subcategory": "oop-concepts",
      "difficulty": 3,
      "tags": [
        "oop",
        "constructor",
        "destructor",
        "static",
        "initialization"
      ]
    }
  ]
}