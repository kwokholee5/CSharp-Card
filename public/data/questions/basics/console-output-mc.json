{
  "$schema": "../../metadata/schema.json",
  "metadata": {
    "category": "basics",
    "subcategory": "console-output-mc",
    "fileVersion": 1,
    "lastUpdated": "2025-01-29T15:00:00Z",
    "questionCount": 10,
    "avgDifficulty": 2.5
  },
  "questions": [
    {
      "id": "console-0001",
      "question": "What is the difference between Console.WriteLine() and Console.Write() in C#?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Console.WriteLine() prints text, Console.Write() prints numbers only",
          "explanation": "Incorrect. Both methods can print any object type."
        },
        {
          "id": "b",
          "text": "Console.WriteLine() adds a newline character after output, Console.Write() does not",
          "explanation": "Correct! WriteLine adds a line terminator (\\r\\n on Windows), Write outputs without it."
        },
        {
          "id": "c",
          "text": "Console.WriteLine() is faster than Console.Write()",
          "explanation": "Incorrect. Performance difference is negligible and depends on buffering."
        },
        {
          "id": "d",
          "text": "There is no functional difference between them",
          "explanation": "Incorrect. The key difference is the automatic line terminator in WriteLine."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Console.WriteLine() automatically appends Environment.NewLine to the output, while Console.Write() outputs text exactly as provided without adding line terminators.",
      "codeExample": {
        "language": "csharp",
        "code": "Console.Write(\"Hello \");\nConsole.Write(\"World!\");\nConsole.WriteLine();\nConsole.WriteLine(\"Next line\");\nConsole.WriteLine(\"Another line\");",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 1,
      "tags": ["console", "output", "writeline", "write", "newline"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0002",
      "question": "What will this Console.WriteLine() code output when using string interpolation?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "The value is {value}",
          "explanation": "Incorrect. This would be the output without the $ prefix."
        },
        {
          "id": "b",
          "text": "The value is 42",
          "explanation": "Correct! The $ prefix enables string interpolation, replacing {value} with the variable's value."
        },
        {
          "id": "c",
          "text": "Compilation error",
          "explanation": "Incorrect. String interpolation syntax is valid C#."
        },
        {
          "id": "d",
          "text": "The value is System.Int32",
          "explanation": "Incorrect. String interpolation calls ToString() on the value, not GetType()."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "String interpolation (introduced in C# 6.0) uses the $ prefix to embed expressions directly in string literals. The {value} expression is evaluated and converted to string.",
      "codeExample": {
        "language": "csharp",
        "code": "int value = 42;\nConsole.WriteLine($\"The value is {value}\");",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 2,
      "tags": ["console", "string-interpolation", "writeline", "variables"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0003",
      "question": "What will this Console.WriteLine() format string code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Name: John, Age: 25, Score: 95.50",
          "explanation": "Correct! Composite formatting uses {index:format} syntax with positional arguments."
        },
        {
          "id": "b",
          "text": "Name: {0}, Age: {1}, Score: {2:F2}",
          "explanation": "Incorrect. This would be the literal string without argument substitution."
        },
        {
          "id": "c",
          "text": "Name: John, Age: 25, Score: 95.5",
          "explanation": "Incorrect. The F2 format specifier ensures exactly 2 decimal places."
        },
        {
          "id": "d",
          "text": "FormatException at runtime",
          "explanation": "Incorrect. The format string and arguments are properly matched."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Composite formatting uses numbered placeholders {0}, {1}, etc. The F2 format specifier formats the double with exactly 2 decimal places.",
      "codeExample": {
        "language": "csharp",
        "code": "string name = \"John\";\nint age = 25;\ndouble score = 95.5;\nConsole.WriteLine(\"Name: {0}, Age: {1}, Score: {2:F2}\", name, age, score);",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 3,
      "tags": ["console", "composite-formatting", "format-strings", "placeholders"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0004",
      "question": "What happens when you call Console.WriteLine() with a null object?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Prints 'null'",
          "explanation": "Incorrect. Console.WriteLine doesn't print the literal string 'null'."
        },
        {
          "id": "b",
          "text": "Prints an empty line",
          "explanation": "Correct! Console.WriteLine(null) is equivalent to Console.WriteLine() with no arguments."
        },
        {
          "id": "c",
          "text": "Throws NullReferenceException",
          "explanation": "Incorrect. Console.WriteLine handles null gracefully."
        },
        {
          "id": "d",
          "text": "Throws ArgumentNullException",
          "explanation": "Incorrect. Console.WriteLine accepts null as a valid argument."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Console.WriteLine(null) is treated the same as Console.WriteLine() with no arguments, which outputs just a line terminator (empty line).",
      "codeExample": {
        "language": "csharp",
        "code": "string nullString = null;\nConsole.WriteLine(\"Before\");\nConsole.WriteLine(nullString);\nConsole.WriteLine(\"After\");",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 2,
      "tags": ["console", "null-handling", "writeline", "empty-line"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0005",
      "question": "What will this code output when using Console.WriteLine() with array ToString()?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "1, 2, 3, 4, 5",
          "explanation": "Incorrect. Arrays don't override ToString() to display elements."
        },
        {
          "id": "b",
          "text": "System.Int32[]",
          "explanation": "Correct! Array.ToString() returns the type name, not the element values."
        },
        {
          "id": "c",
          "text": "[1, 2, 3, 4, 5]",
          "explanation": "Incorrect. This would require string.Join() or custom formatting."
        },
        {
          "id": "d",
          "text": "Runtime exception",
          "explanation": "Incorrect. The code runs successfully, just doesn't show array contents."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Arrays inherit the default Object.ToString() behavior which returns the type name. To display array contents, use string.Join() or loop through elements.",
      "codeExample": {
        "language": "csharp",
        "code": "int[] numbers = {1, 2, 3, 4, 5};\nConsole.WriteLine(numbers);\nConsole.WriteLine(numbers.ToString());\nConsole.WriteLine(string.Join(\", \", numbers));",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 3,
      "tags": ["console", "arrays", "tostring", "object-behavior"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0006",
      "question": "What is the output of this Console.WriteLine() code with escaped characters?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Hello\\nWorld\\tTab",
          "explanation": "Incorrect. Escape sequences are interpreted, not printed literally."
        },
        {
          "id": "b",
          "text": "Hello\nWorld\tTab",
          "explanation": "Correct! \\n creates a newline and \\t creates a tab character."
        },
        {
          "id": "c",
          "text": "HelloWorld    Tab",
          "explanation": "Incorrect. This doesn't show the newline effect."
        },
        {
          "id": "d",
          "text": "Compilation error due to invalid escape sequences",
          "explanation": "Incorrect. \\n and \\t are valid escape sequences."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "Escape sequences in string literals are processed at compile time. \\n becomes a newline character, \\t becomes a tab character.",
      "codeExample": {
        "language": "csharp",
        "code": "Console.WriteLine(\"Hello\\nWorld\\tTab\");\n// Equivalent to:\nConsole.WriteLine(\"Hello\");\nConsole.Write(\"World\");\nConsole.Write(\"\\t\");\nConsole.WriteLine(\"Tab\");",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 2,
      "tags": ["console", "escape-sequences", "newline", "tab", "strings"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0007",
      "question": "What will Console.WriteLine() output for this boolean expression?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True",
          "explanation": "Correct! Boolean.ToString() returns 'True' for true values (note the capital T)."
        },
        {
          "id": "b",
          "text": "true",
          "explanation": "Incorrect. C# Boolean.ToString() uses PascalCase, not lowercase."
        },
        {
          "id": "c",
          "text": "1",
          "explanation": "Incorrect. C# doesn't convert bool to int for string representation."
        },
        {
          "id": "d",
          "text": "YES",
          "explanation": "Incorrect. Boolean.ToString() uses 'True'/'False', not other representations."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "In C#, Boolean.ToString() returns 'True' or 'False' with capital first letters, which differs from some other languages that use lowercase.",
      "codeExample": {
        "language": "csharp",
        "code": "bool isValid = 5 > 3;\nConsole.WriteLine(isValid);\nConsole.WriteLine(true);\nConsole.WriteLine(false);",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 2,
      "tags": ["console", "boolean", "tostring", "true-false"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0008",
      "question": "What happens when using Console.WriteLine() with multiple overloads in this scenario?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "42System.Int32",
          "explanation": "Incorrect. The compiler chooses the most specific overload."
        },
        {
          "id": "b",
          "text": "42",
          "explanation": "Correct! WriteLine(int) is more specific than WriteLine(object), so it's chosen."
        },
        {
          "id": "c",
          "text": "Compilation error due to ambiguous method call",
          "explanation": "Incorrect. The compiler can resolve this based on parameter types."
        },
        {
          "id": "d",
          "text": "System.Int32",
          "explanation": "Incorrect. This would happen if only WriteLine(object) existed."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "C# method overload resolution chooses the most specific applicable method. WriteLine(int) is more specific than WriteLine(object) for an int argument.",
      "codeExample": {
        "language": "csharp",
        "code": "int number = 42;\nConsole.WriteLine(number);  // Calls WriteLine(int)\n// Available overloads:\n// WriteLine(int)\n// WriteLine(object)\n// WriteLine(string)\n// etc.",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 3,
      "tags": ["console", "method-overloads", "overload-resolution", "specificity"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0009",
      "question": "What will this Console.WriteLine() code output with numeric formatting?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "$1,234.57",
          "explanation": "Correct! The C format specifier displays currency format with the current culture's currency symbol."
        },
        {
          "id": "b",
          "text": "1234.57C",
          "explanation": "Incorrect. The C format doesn't append 'C' to the number."
        },
        {
          "id": "c",
          "text": "1,234.57",
          "explanation": "Incorrect. This would be the N (Number) format, not C (Currency)."
        },
        {
          "id": "d",
          "text": "1234.567",
          "explanation": "Incorrect. The C format adds currency symbol and proper grouping."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "The C format specifier formats numbers as currency using the current culture's currency format (symbol, decimal places, grouping).",
      "codeExample": {
        "language": "csharp",
        "code": "double price = 1234.567;\nConsole.WriteLine($\"{price:C}\");\nConsole.WriteLine(price.ToString(\"C\"));\n// Both produce the same result",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 3,
      "tags": ["console", "numeric-formatting", "currency", "culture", "format-specifiers"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    },
    {
      "id": "console-0010",
      "question": "What is the behavior of Console.WriteLine() when the console output is redirected?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Throws InvalidOperationException",
          "explanation": "Incorrect. Console.WriteLine handles redirection gracefully."
        },
        {
          "id": "b",
          "text": "Output is buffered differently and sent to the redirect target",
          "explanation": "Correct! When redirected, console output may be fully buffered instead of line-buffered."
        },
        {
          "id": "c",
          "text": "No output is produced",
          "explanation": "Incorrect. Output is still produced, just sent to the redirect target."
        },
        {
          "id": "d",
          "text": "Behavior is identical to normal console output",
          "explanation": "Incorrect. Buffering behavior can change when output is redirected."
        }
      ],
      "correctAnswerIndex": 1,
      "explanation": "When console output is redirected (to file, pipe, etc.), the .NET runtime may change buffering behavior from line-buffered to fully-buffered for better performance.",
      "codeExample": {
        "language": "csharp",
        "code": "// Normal execution:\nConsole.WriteLine(\"Hello\");  // Appears immediately\n\n// Redirected execution (myapp.exe > output.txt):\nConsole.WriteLine(\"Hello\");  // May be buffered\nConsole.Out.Flush();         // Forces immediate output",
      },
      "category": "basics",
      "subcategory": "console-output-mc",
      "difficulty": 4,
      "tags": ["console", "redirection", "buffering", "streams", "output"],
      "createdAt": "2025-01-29T15:00:00Z",
      "updatedAt": "2025-01-29T15:00:00Z",
      "version": 1
    }
  ]
}
