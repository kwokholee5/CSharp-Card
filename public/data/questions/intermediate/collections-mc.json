{
  "$schema": "../../metadata/schema.json",
  "metadata": {
    "category": "intermediate",
    "subcategory": "collections-mc",
    "fileVersion": 1,
    "lastUpdated": "2025-01-29T15:30:00Z",
    "questionCount": 13,
    "avgDifficulty": 4.2
  },
  "questions": [
    {
      "id": "coll-0001",
      "question": "What will this C# List<T> modification code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "1, 2, 4, 5",
          "explanation": "RemoveAt(2) removes the element at index 2 (which is 3), leaving 1, 2, 4, 5."
        },
        {
          "id": "b",
          "text": "1, 2, 3, 5",
          "explanation": "RemoveAt removes by index, not by value."
        },
        {
          "id": "c",
          "text": "1, 4, 5",
          "explanation": "Only one element is removed at index 2."
        },
        {
          "id": "d",
          "text": "IndexOutOfRangeException",
          "explanation": "Index 2 is valid for a list of 5 elements (indices 0-4)."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "List<T>.RemoveAt(index) removes the element at the specified zero-based index. Elements after the removed element shift down by one position.",
      "codeExample": {
        "language": "csharp",
        "code": "List<int> numbers = new List<int> {1, 2, 3, 4, 5};\nnumbers.RemoveAt(2);  // Removes element at index 2 (value 3)\nConsole.WriteLine(string.Join(\", \", numbers));"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 2,
      "tags": [
        "collections",
        "list",
        "removeat",
        "indexing",
        "generic-collections"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0002",
      "question": "What is the output of this C# Dictionary<TKey, TValue> access example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Alice\nKeyNotFoundException",
          "explanation": "Dictionary[key] throws KeyNotFoundException when the key doesn't exist."
        },
        {
          "id": "b",
          "text": "Alice\nnull",
          "explanation": "Dictionary indexer throws exception for missing keys, doesn't return null."
        },
        {
          "id": "c",
          "text": "Alice\n",
          "explanation": "Missing key access throws an exception, not empty string."
        },
        {
          "id": "d",
          "text": "Both lines throw KeyNotFoundException",
          "explanation": "The first key ('A') exists in the dictionary."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Dictionary indexer (dict[key]) throws KeyNotFoundException when accessing non-existent keys. Use TryGetValue() or ContainsKey() for safe access.",
      "codeExample": {
        "language": "csharp",
        "code": "Dictionary<char, string> dict = new Dictionary<char, string>\n{\n    {'A', \"Alice\"},\n    {'B', \"Bob\"}\n};\n\nConsole.WriteLine(dict['A']);\ntry\n{\n    Console.WriteLine(dict['C']);  // Key doesn't exist\n}\ncatch (KeyNotFoundException)\n{\n    Console.WriteLine(\"KeyNotFoundException\");\n}"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 3,
      "tags": [
        "collections",
        "dictionary",
        "keynotfoundexception",
        "indexer",
        "exception-handling"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0003",
      "question": "What will this C# HashSet<T> operations code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "True\nFalse\n1, 2, 3, 4, 5",
          "explanation": "HashSet automatically handles duplicates, Add returns false when element already exists."
        },
        {
          "id": "b",
          "text": "True\nTrue\n1, 2, 3, 3, 4, 5",
          "explanation": "HashSet doesn't allow duplicates, so the second Add returns false."
        },
        {
          "id": "c",
          "text": "True\nFalse\n1, 2, 3, 3, 4, 5",
          "explanation": "HashSet stores unique elements only, no duplicates."
        },
        {
          "id": "d",
          "text": "Exception when adding duplicate",
          "explanation": "HashSet.Add gracefully handles duplicates by returning false."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "HashSet<T> maintains unique elements. The Add method returns true if the element was added, false if it already existed. Duplicates are automatically ignored.",
      "codeExample": {
        "language": "csharp",
        "code": "HashSet<int> set = new HashSet<int> {1, 2, 3};\nbool added1 = set.Add(4);     // New element\nbool added2 = set.Add(3);     // Duplicate element\nset.Add(5);\n\nConsole.WriteLine(added1);\nConsole.WriteLine(added2);\nConsole.WriteLine(string.Join(\", \", set.OrderBy(x => x)));"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 3,
      "tags": [
        "collections",
        "hashset",
        "unique-elements",
        "add-method",
        "duplicates"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0004",
      "question": "What do both Console.WriteLine() statements output in order?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Queue: A, B\nStack: C, B",
          "explanation": "Queue is FIFO (First In, First Out), Stack is LIFO (Last In, First Out)."
        },
        {
          "id": "b",
          "text": "Queue: C, B\nStack: A, B",
          "explanation": "Queue follows FIFO order, Stack follows LIFO order."
        },
        {
          "id": "c",
          "text": "Queue: A, B\nStack: A, B",
          "explanation": "Stack follows LIFO, so 'C' is dequeued first, then 'B'."
        },
        {
          "id": "d",
          "text": "InvalidOperationException on empty collections",
          "explanation": "The collections are not empty when Dequeue/Pop operations occur."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Queue<T> follows FIFO (First In, First Out) principle using Enqueue/Dequeue. Stack<T> follows LIFO (Last In, First Out) principle using Push/Pop.",
      "codeExample": {
        "language": "csharp",
        "code": "Queue<string> queue = new Queue<string>();\nqueue.Enqueue(\"A\"); queue.Enqueue(\"B\"); queue.Enqueue(\"C\");\nstring q1 = queue.Dequeue(); string q2 = queue.Dequeue();\n\nStack<string> stack = new Stack<string>();\nstack.Push(\"A\"); stack.Push(\"B\"); stack.Push(\"C\");\nstring s1 = stack.Pop(); string s2 = stack.Pop();\n\nConsole.WriteLine($\"Queue: {q1}, {q2}\");\nConsole.WriteLine($\"Stack: {s1}, {s2}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 3,
      "tags": [
        "collections",
        "queue",
        "stack",
        "fifo",
        "lifo",
        "data-structures"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0005",
      "question": "What will this C# SortedDictionary<TKey, TValue> code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Alice: 25\nBob: 30\nCharlie: 35",
          "explanation": "SortedDictionary maintains elements in sorted order by key (alphabetical for strings)."
        },
        {
          "id": "b",
          "text": "Charlie: 35\nAlice: 25\nBob: 30",
          "explanation": "SortedDictionary sorts by key, not by insertion order."
        },
        {
          "id": "c",
          "text": "Bob: 30\nAlice: 25\nCharlie: 35",
          "explanation": "Elements are sorted alphabetically by key, not by value."
        },
        {
          "id": "d",
          "text": "Elements in random order",
          "explanation": "SortedDictionary maintains a consistent sorted order."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "SortedDictionary<TKey, TValue> automatically maintains elements in sorted order by key. For string keys, this means alphabetical order.",
      "codeExample": {
        "language": "csharp",
        "code": "SortedDictionary<string, int> ages = new SortedDictionary<string, int>\n{\n    {\"Charlie\", 35},\n    {\"Alice\", 25},\n    {\"Bob\", 30}\n};\n\nforeach (var kvp in ages)\n{\n    Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n}"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 3,
      "tags": [
        "collections",
        "sorteddictionary",
        "sorted-order",
        "key-sorting",
        "iteration"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0006",
      "question": "What is the output of this C# collection initialization and modification?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Count: 3\nCapacity: 4\nModified: 1, 20, 3",
          "explanation": "List capacity grows as needed, and elements can be modified by index."
        },
        {
          "id": "b",
          "text": "Count: 3\nCapacity: 3\nModified: 1, 20, 3",
          "explanation": "List capacity is typically larger than count to allow for growth."
        },
        {
          "id": "c",
          "text": "Count: 3\nCapacity: 4\nModified: 1, 2, 3",
          "explanation": "The assignment list[1] = 20 changes the second element."
        },
        {
          "id": "d",
          "text": "IndexOutOfRangeException when accessing list[1]",
          "explanation": "Index 1 is valid for a list with 3 elements (indices 0, 1, 2)."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "List<T> automatically manages capacity (internal array size) which is usually larger than count (actual elements). Elements can be accessed and modified by index.",
      "codeExample": {
        "language": "csharp",
        "code": "List<int> numbers = new List<int> {1, 2, 3};\nConsole.WriteLine($\"Count: {numbers.Count}\");\nConsole.WriteLine($\"Capacity: {numbers.Capacity}\");\n\nnumbers[1] = 20;  // Modify element at index 1\nConsole.WriteLine($\"Modified: {string.Join(\", \", numbers)}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 3,
      "tags": [
        "collections",
        "list",
        "capacity",
        "count",
        "indexer",
        "modification"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0007",
      "question": "What will this C# LinkedList<T> navigation code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "First: A\nLast: C\nAfter A: B",
          "explanation": "LinkedList provides efficient access to first/last nodes and navigation between nodes."
        },
        {
          "id": "b",
          "text": "First: C\nLast: A\nAfter A: null",
          "explanation": "LinkedList maintains insertion order, and nodes have proper linkage."
        },
        {
          "id": "c",
          "text": "IndexOutOfRangeException",
          "explanation": "LinkedList doesn't use indices, it uses node references."
        },
        {
          "id": "d",
          "text": "NullReferenceException when accessing Next",
          "explanation": "The first node ('A') has a valid Next reference to the second node ('B')."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "LinkedList<T> provides efficient insertion/deletion at any position. Each node has references to previous and next nodes, allowing bidirectional navigation.",
      "codeExample": {
        "language": "csharp",
        "code": "LinkedList<string> list = new LinkedList<string>();\nlist.AddLast(\"A\");\nlist.AddLast(\"B\");\nlist.AddLast(\"C\");\n\nConsole.WriteLine($\"First: {list.First.Value}\");\nConsole.WriteLine($\"Last: {list.Last.Value}\");\nConsole.WriteLine($\"After A: {list.First.Next.Value}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "linkedlist",
        "nodes",
        "navigation",
        "first-last"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0008",
      "question": "What is the output of this C# ArrayList vs List<T> comparison?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "ArrayList: System.Object\nList<T>: System.Int32",
          "explanation": "ArrayList stores objects (boxing occurs), List<T> maintains type safety."
        },
        {
          "id": "b",
          "text": "ArrayList: System.Int32\nList<T>: System.Int32",
          "explanation": "ArrayList stores everything as object type."
        },
        {
          "id": "c",
          "text": "Both output: System.Int32",
          "explanation": "ArrayList uses object type, causing boxing of value types."
        },
        {
          "id": "d",
          "text": "Compilation error - ArrayList is deprecated",
          "explanation": "ArrayList still exists but is not recommended for new code."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "ArrayList stores elements as object type, causing boxing for value types. List<T> is generic and maintains type safety, avoiding boxing overhead.",
      "codeExample": {
        "language": "csharp",
        "code": "ArrayList arrayList = new ArrayList {10};\nList<int> genericList = new List<int> {10};\n\nConsole.WriteLine($\"ArrayList: {arrayList[0].GetType()}\");\nConsole.WriteLine($\"List<T>: {genericList[0].GetType()}\");\n\n// ArrayList requires casting:\n// int value = (int)arrayList[0];\n// List<T> is type-safe:\n// int value = genericList[0];"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "arraylist",
        "generic-list",
        "boxing",
        "type-safety"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0009",
      "question": "What will this C# IEnumerable iteration and modification code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "1\n2\nInvalidOperationException",
          "explanation": "You cannot modify a collection while iterating over it with foreach."
        },
        {
          "id": "b",
          "text": "1\n2\n3\n4",
          "explanation": "Modifying collection during iteration throws an exception."
        },
        {
          "id": "c",
          "text": "1\n2\n4",
          "explanation": "The exception is thrown before processing element 4."
        },
        {
          "id": "d",
          "text": "Compilation error",
          "explanation": "The code compiles but throws a runtime exception."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Modifying a collection during foreach iteration invalidates the enumerator and throws InvalidOperationException. Use for loop or create a copy for safe modification.",
      "codeExample": {
        "language": "csharp",
        "code": "List<int> numbers = new List<int> {1, 2, 3, 4};\n\ntry\n{\n    foreach (int num in numbers)\n    {\n        Console.WriteLine(num);\n        if (num == 2)\n        {\n            numbers.Add(5);  // Modifies collection during iteration\n        }\n    }\n}\ncatch (InvalidOperationException)\n{\n    Console.WriteLine(\"InvalidOperationException\");\n}"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "enumeration",
        "foreach",
        "invalidoperationexception",
        "modification"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0010",
      "question": "What is the output of this C# ReadOnlyCollection<T> example?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "Original: 1, 2, 3\nReadOnly: 1, 2, 10\nModified: 1, 2, 10",
          "explanation": "ReadOnlyCollection is a wrapper; changes to underlying collection are reflected."
        },
        {
          "id": "b",
          "text": "Original: 1, 2, 10\nReadOnly: 1, 2, 3\nModified: 1, 2, 10",
          "explanation": "ReadOnlyCollection reflects changes in the underlying collection."
        },
        {
          "id": "c",
          "text": "Exception when modifying through readonly wrapper",
          "explanation": "ReadOnlyCollection prevents direct modification but reflects underlying changes."
        },
        {
          "id": "d",
          "text": "ReadOnlyCollection creates independent copy",
          "explanation": "ReadOnlyCollection is a wrapper, not a copy."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "ReadOnlyCollection<T> is a wrapper around an existing collection. It prevents modification through the wrapper but reflects changes made to the underlying collection.",
      "codeExample": {
        "language": "csharp",
        "code": "List<int> original = new List<int> {1, 2, 3};\nReadOnlyCollection<int> readOnly = new ReadOnlyCollection<int>(original);\n\noriginal[2] = 10;  // Modify underlying collection\n\nConsole.WriteLine($\"Original: {string.Join(\", \", original)}\");\nConsole.WriteLine($\"ReadOnly: {string.Join(\", \", readOnly)}\");\n// readOnly[0] = 5;  // Would cause compilation error\nConsole.WriteLine($\"Modified: {string.Join(\", \", original)}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "readonlycollection",
        "wrapper",
        "immutability",
        "references"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0011",
      "question": "What will this C# SortedSet<T> operations code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "1, 2, 3, 4, 5\nMin: 1, Max: 5",
          "explanation": "SortedSet maintains unique elements in sorted order and provides efficient Min/Max access."
        },
        {
          "id": "b",
          "text": "5, 3, 1, 2, 4\nMin: 1, Max: 5",
          "explanation": "SortedSet maintains elements in sorted order, not insertion order."
        },
        {
          "id": "c",
          "text": "1, 2, 3, 3, 4, 5\nMin: 1, Max: 5",
          "explanation": "SortedSet doesn't allow duplicates."
        },
        {
          "id": "d",
          "text": "Exception when adding duplicate element",
          "explanation": "SortedSet.Add returns false for duplicates but doesn't throw exceptions."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "SortedSet<T> combines the uniqueness of HashSet with automatic sorting. It provides efficient Min and Max properties for accessing extremes.",
      "codeExample": {
        "language": "csharp",
        "code": "SortedSet<int> sortedSet = new SortedSet<int> {5, 3, 1, 2, 4, 3};\n\nConsole.WriteLine(string.Join(\", \", sortedSet));\nConsole.WriteLine($\"Min: {sortedSet.Min}, Max: {sortedSet.Max}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "sortedset",
        "unique-elements",
        "sorted-order",
        "min-max"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0012",
      "question": "What is the output of this C# ConcurrentDictionary<TKey, TValue> thread-safe operations?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "AddOrUpdate: 10\nGetOrAdd: Hello",
          "explanation": "AddOrUpdate executes the update function (key 'A' exists), GetOrAdd executes the add function (key 'C' doesn't exist)."
        },
        {
          "id": "b",
          "text": "AddOrUpdate: 5\nGetOrAdd: Hello",
          "explanation": "AddOrUpdate uses the update function when key exists, returning old value + 5."
        },
        {
          "id": "c",
          "text": "AddOrUpdate: 10\nGetOrAdd: World",
          "explanation": "GetOrAdd adds the new value when key doesn't exist."
        },
        {
          "id": "d",
          "text": "Thread synchronization exception",
          "explanation": "ConcurrentDictionary handles thread safety internally."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "ConcurrentDictionary provides thread-safe operations. AddOrUpdate adds or updates atomically, GetOrAdd retrieves existing or adds new value atomically.",
      "codeExample": {
        "language": "csharp",
        "code": "ConcurrentDictionary<string, object> dict = new ConcurrentDictionary<string, object>();\ndict[\"A\"] = 5;\ndict[\"B\"] = \"World\";\n\n// AddOrUpdate: if key exists, update; if not, add\nvar result1 = dict.AddOrUpdate(\"A\", 0, (key, oldValue) => (int)oldValue + 5);\n\n// GetOrAdd: if key exists, get; if not, add\nvar result2 = dict.GetOrAdd(\"C\", \"Hello\");\n\nConsole.WriteLine($\"AddOrUpdate: {result1}\");\nConsole.WriteLine($\"GetOrAdd: {result2}\");"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 5,
      "tags": [
        "collections",
        "concurrentdictionary",
        "thread-safety",
        "addorupdate",
        "getoradd"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    },
    {
      "id": "coll-0013",
      "question": "What will this C# IComparer<T> custom sorting code output?",
      "type": "multiple-choice",
      "options": [
        {
          "id": "a",
          "text": "apple, orange, banana",
          "explanation": "Custom comparer sorts by string length: apple(5), orange(6), banana(6) - for equal lengths, original order is maintained."
        },
        {
          "id": "b",
          "text": "apple, banana, orange",
          "explanation": "The custom comparer sorts by length first, then maintains relative order for equal lengths."
        },
        {
          "id": "c",
          "text": "banana, orange, apple",
          "explanation": "This would be reverse length order."
        },
        {
          "id": "d",
          "text": "apple, banana, orange",
          "explanation": "While banana and orange have equal length, the sort is stable and maintains original relative order."
        }
      ],
      "correctAnswerIndex": 0,
      "explanation": "Custom IComparer<T> allows defining custom sorting logic. This comparer sorts by string length first, then maintains original order for equal-length strings (stable sort).",
      "codeExample": {
        "language": "csharp",
        "code": "public class LengthComparer : IComparer<string>\n{\n    public int Compare(string x, string y)\n    {\n        return x.Length.CompareTo(y.Length);\n    }\n}\n\nList<string> fruits = new List<string> {\"banana\", \"apple\", \"orange\"};\nfruits.Sort(new LengthComparer());\n\nConsole.WriteLine(string.Join(\", \", fruits));"
      },
      "category": "intermediate",
      "subcategory": "collections-mc",
      "difficulty": 4,
      "tags": [
        "collections",
        "icomparer",
        "custom-sorting",
        "sort",
        "comparison"
      ],
      "createdAt": "2025-01-29T15:30:00Z",
      "updatedAt": "2025-01-29T15:30:00Z",
      "version": 1
    }
  ]
}